---
export interface Props {
  url: string;
  title?: string;
  description?: string;
  embedUrl?: string;
  type?: 'iframe' | 'link';
  height?: string;
}

const { 
  url, 
  title = 'External Content', 
  description,
  embedUrl,
  type = 'link',
  height = '400'
} = Astro.props;

// Auto-detect embed type and URL for common services
function detectEmbedInfo(url: string) {
  const domain = new URL(url).hostname.toLowerCase();
  
  // Instagram
  if (domain.includes('instagram.com')) {
    const postMatch = url.match(/instagram\.com\/p\/([^\/\?]+)/);
    if (postMatch) {
      return {
        type: 'iframe',
        embedUrl: `https://www.instagram.com/p/${postMatch[1]}/embed/`,
        service: 'Instagram',
        icon: 'üì∏'
      };
    }
  }
  
  // TikTok
  if (domain.includes('tiktok.com')) {
    const videoMatch = url.match(/tiktok\.com\/@[^\/]+\/video\/(\d+)/);
    if (videoMatch) {
      return {
        type: 'iframe',
        embedUrl: `https://www.tiktok.com/embed/v2/${videoMatch[1]}`,
        service: 'TikTok',
        icon: 'üéµ'
      };
    }
  }
  
  // SoundCloud
  if (domain.includes('soundcloud.com')) {
    return {
      type: 'iframe',
      embedUrl: `https://w.soundcloud.com/player/?url=${encodeURIComponent(url)}&color=%23fb923c&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true`,
      service: 'SoundCloud',
      icon: 'üîä'
    };
  }
  
  // Figma
  if (domain.includes('figma.com')) {
    const fileMatch = url.match(/figma\.com\/file\/([^\/\?]+)/);
    if (fileMatch) {
      return {
        type: 'iframe',
        embedUrl: `https://www.figma.com/embed?embed_host=share&url=${encodeURIComponent(url)}`,
        service: 'Figma',
        icon: 'üé®'
      };
    }
  }
  
  // GitHub Gist
  if (domain.includes('gist.github.com')) {
    const gistMatch = url.match(/gist\.github\.com\/[^\/]+\/([^\/\?]+)/);
    if (gistMatch) {
      return {
        type: 'iframe',
        embedUrl: `${url}.pibb`,
        service: 'GitHub Gist',
        icon: 'üìù'
      };
    }
  }
  
  // Observable
  if (domain.includes('observablehq.com')) {
    return {
      type: 'iframe',
      embedUrl: `${url}?embed=true`,
      service: 'Observable',
      icon: 'üìä'
    };
  }
  
  // Default fallback
  return {
    type: 'link',
    embedUrl: null,
    service: new URL(url).hostname,
    icon: 'üîó'
  };
}

const embedInfo = detectEmbedInfo(url);
const finalEmbedUrl = embedUrl || embedInfo.embedUrl;
const finalType = type === 'iframe' && finalEmbedUrl ? 'iframe' : 'link';
---

<div class="generic-embed">
  {finalType === 'iframe' && finalEmbedUrl ? (
    <div class="embed-container">
      <iframe 
        src={finalEmbedUrl}
        title={title}
        style={`height: ${height}px; width: 100%;`}
        frameborder="0"
        scrolling="no"
        allowtransparency="true"
        allowfullscreen
        loading="lazy">
      </iframe>
    </div>
  ) : (
    <div class="embed-link-preview">
      <div class="embed-content">
        <h4 class="embed-title">{title}</h4>
        {description && <p class="embed-description">{description}</p>}
        <div class="embed-meta">
          <span class="embed-domain">{embedInfo.service}</span>
          <span class="embed-arrow">‚Üí</span>
        </div>
      </div>
    </div>
  )}
  
  <div class="embed-caption">
    <div class="embed-caption-left">
      <span class="embed-icon">{embedInfo.icon}</span>
      <span class="embed-text">{embedInfo.service}</span>
    </div>
    <a href={url} target="_blank" rel="noopener noreferrer" class="embed-link">
      View Original
    </a>
  </div>
</div>

<style>
  .generic-embed {
    margin: var(--space-xl) 0;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    overflow: hidden;
    background: var(--color-surface);
    transition: all 0.2s ease;
  }

  .generic-embed:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .embed-container {
    background: var(--color-bg);
  }

  .embed-container iframe {
    display: block;
    border-radius: var(--radius-md) var(--radius-md) 0 0;
  }

  .embed-link-preview {
    padding: var(--space-lg);
    background: var(--color-bg);
  }

  .embed-content {
    text-align: center;
  }

  .embed-title {
    font-size: var(--text-lg);
    font-weight: 600;
    margin-bottom: var(--space-sm);
    color: var(--color-text-primary);
    line-height: var(--leading-tight);
  }

  .embed-description {
    color: var(--color-text-secondary);
    margin-bottom: var(--space-sm);
    line-height: var(--leading-normal);
    font-size: var(--text-sm);
  }

  .embed-meta {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-sm);
    color: var(--color-text-tertiary);
    font-size: var(--text-xs);
  }

  .embed-domain {
    font-weight: 500;
  }

  .embed-arrow {
    transition: transform 0.2s ease;
  }

  .generic-embed:hover .embed-arrow {
    transform: translateX(var(--space-xs));
  }

  .embed-caption {
    padding: var(--space-sm) var(--space-md);
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: var(--color-surface);
  }

  .embed-caption-left {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  .embed-icon {
    font-size: var(--text-base);
  }

  .embed-text {
    color: var(--color-text-secondary);
    font-size: var(--text-sm);
    font-weight: 500;
  }

  .embed-link {
    color: var(--color-accent);
    text-decoration: none;
    font-size: var(--text-xs);
    font-weight: 500;
  }

  .embed-link:hover {
    text-decoration: underline;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .generic-embed {
      margin: var(--space-lg) 0;
    }

    .embed-link-preview {
      padding: var(--space-lg);
    }
    
    .embed-caption {
      flex-direction: column;
      gap: var(--space-sm);
      align-items: flex-start;
    }
  }
</style>