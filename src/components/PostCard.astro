---
import LinkPreviewDynamic from './LinkPreviewDynamic.astro';
import YouTubeEmbed from './YouTubeEmbed.astro';
import SpotifyEmbed from './SpotifyEmbed.astro';
import VimeoEmbed from './VimeoEmbed.astro';
import TwitterEmbed from './TwitterEmbed.astro';
import CodePenEmbed from './CodePenEmbed.astro';
import GenericEmbed from './GenericEmbed.astro';
import ContentWithEmbeds from './ContentWithEmbeds.astro';
import { formatDate, calculateReadingTime } from '../utils/shared';

export interface Props {
  post: any;
  showExcerpt?: boolean;
}

const { post, showExcerpt = true } = Astro.props;
const { Content } = await post.render();

// Helper functions to detect embed types
function getYouTubeId(url: string): string | null {
  const match = url.match(/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/);
  return match ? match[1] : null;
}

function getVimeoId(url: string): string | null {
  const match = url.match(/vimeo\.com\/(?:.*#|.*\/videos\/)?([0-9]+)/);
  return match ? match[1] : null;
}

function getSpotifyId(url: string): string | null {
  const match = url.match(/spotify\.com\/(track|album|playlist)\/([a-zA-Z0-9]+)/);
  return match ? match[2] : null;
}

function isTwitterUrl(url: string): boolean {
  return /twitter\.com\/[^\/]+\/status\/\d+/.test(url) || /x\.com\/[^\/]+\/status\/\d+/.test(url);
}

function isCodePenUrl(url: string): boolean {
  return /codepen\.io\/[^\/]+\/pen\/[^\/\?]+/.test(url);
}

// Detect embed type for the URL
function detectEmbedType(url: string) {
  if (!url) return 'link';
  
  if (getYouTubeId(url)) return 'youtube';
  if (getVimeoId(url)) return 'vimeo';
  if (getSpotifyId(url)) return 'spotify';
  if (isTwitterUrl(url)) return 'twitter';
  if (isCodePenUrl(url)) return 'codepen';
  
  // Check for other embeddable services
  const domain = new URL(url).hostname.toLowerCase();
  if (domain.includes('instagram.com') || 
      domain.includes('tiktok.com') || 
      domain.includes('soundcloud.com') || 
      domain.includes('figma.com') || 
      domain.includes('gist.github.com') || 
      domain.includes('observablehq.com')) {
    return 'generic';
  }
  
  return 'link';
}
---

<article class="post-card">
  <div class="post-meta">
    <div class="post-type-badge">
      <span class={`post-type-indicator post-type-indicator--${post.data.type}`}></span>
      <span class="post-type-label">{post.data.type}</span>
    </div>
    <time class="post-date">{formatDate(new Date(post.data.date))}</time>
    <span class="post-reading-time">{calculateReadingTime(post.body || '')} min read</span>
  </div>

  <h2 class="post-title">
    <a href={`/posts/${post.slug}`}>{post.data.title}</a>
  </h2>

  <div class="post-content prose">
    {showExcerpt ? (
      <div class="post-excerpt">
        {post.data.description ? (
          <p>{post.data.description.replace(/#+\s*/g, '').replace(/\[.*?\]\(.*?\)/g, '').replace(/\n/g, ' ').slice(0, 180).trim()}‚Ä¶</p>
        ) : (
          <p>{post.body.replace(/#+\s*/g, '').replace(/\[.*?\]\(.*?\)/g, '').replace(/\n/g, ' ').slice(0, 160).trim()}‚Ä¶</p>
        )}
      </div>
    ) : (
      <div class="post-full-content">
        <ContentWithEmbeds post={post} />
      </div>
    )}
  </div>

  {/* Enhanced embed handling for all URL types */}
  {post.data.url && (() => {
    const embedType = detectEmbedType(post.data.url);
    
    switch (embedType) {
      case 'youtube':
        return <YouTubeEmbed videoId={getYouTubeId(post.data.url)} />;
      
      case 'vimeo':
        return <VimeoEmbed url={post.data.url} />;
      
      case 'spotify':
        return <SpotifyEmbed url={post.data.url} title={post.data.title} />;
      
      case 'twitter':
        return <TwitterEmbed url={post.data.url} />;
      
      case 'codepen':
        return <CodePenEmbed url={post.data.url} />;
      
      case 'generic':
        return <GenericEmbed url={post.data.url} title={post.data.title} />;
      
      case 'link':
      default:
        return <LinkPreviewDynamic url={post.data.url} />;
    }
  })()}

  {/* Dive Deeper section */}
  {post.data.dive_deeper && post.data.dive_deeper.length > 0 && (
    <div class="dive-deeper">
      <h3>üê∞ Dive Deeper</h3>
      <ul>
        {post.data.dive_deeper.map((item: string) => (
          <li>{item}</li>
        ))}
      </ul>
    </div>
  )}

  {/* Tags */}
  {post.data.tags && post.data.tags.length > 0 && (
    <div class="post-tags">
      {post.data.tags.map((tag: string) => (
        <a href={`/tags/${tag}`} class="tag">{tag}</a>
      ))}
    </div>
  )}

  {/* Post actions */}
  {showExcerpt && (
    <div class="post-actions">
      <a href={`/posts/${post.slug}`} class="btn">Read more</a>
    </div>
  )}
  
</article>