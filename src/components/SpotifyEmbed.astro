---
export interface Props {
  url: string;
  title?: string;
}

const { url, title = 'Spotify Content' } = Astro.props;

// Enhanced Spotify URL parsing to support tracks, albums, and playlists
function parseSpotifyUrl(url: string) {
  const match = url.match(/spotify\.com\/(track|album|playlist)\/([a-zA-Z0-9]+)/);
  if (match) {
    return {
      type: match[1],
      id: match[2]
    };
  }
  return null;
}

const spotifyData = parseSpotifyUrl(url);

// Generate appropriate iframe height based on content type
function getEmbedHeight(type: string): string {
  switch (type) {
    case 'track':
      return '152';
    case 'album':
      return '352';
    case 'playlist':
      return '452';
    default:
      return '152';
  }
}

function getEmbedLabel(type: string): string {
  switch (type) {
    case 'track':
      return 'Spotify Track';
    case 'album':
      return 'Spotify Album';
    case 'playlist':
      return 'Spotify Playlist';
    default:
      return 'Spotify Content';
  }
}
---

{spotifyData ? (
  <div class="spotify-embed">
    <div class="embed-container">
      <iframe 
        src={`https://open.spotify.com/embed/${spotifyData.type}/${spotifyData.id}`}
        width="100%" 
        height={getEmbedHeight(spotifyData.type)}
        frameborder="0" 
        allowtransparency="true" 
        allow="encrypted-media"
        loading="lazy"
        title={`${getEmbedLabel(spotifyData.type)}: ${title}`}>
      </iframe>
    </div>
    <div class="embed-caption">
      <span class="embed-icon">ðŸŽµ</span>
      <span class="embed-text">{getEmbedLabel(spotifyData.type)}</span>
    </div>
  </div>
) : (
  <div class="spotify-embed">
    <div class="embed-error">
      <div class="error-icon">ðŸŽµ</div>
      <p>Invalid Spotify URL</p>
      <a href={url} target="_blank" rel="noopener noreferrer" class="fallback-link">
        Open in Spotify
      </a>
    </div>
  </div>
)}

<style>
  .spotify-embed {
    margin: var(--space-xl) 0;
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    overflow: hidden;
    background: var(--color-surface);
  }

  .embed-container {
    background: var(--color-bg);
  }

  .embed-container iframe {
    width: 100%;
    border-radius: var(--radius-md) var(--radius-md) 0 0;
  }

  .embed-caption {
    padding: var(--space-sm) var(--space-md);
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    background: var(--color-surface);
  }

  .embed-icon {
    font-size: var(--text-base);
  }

  .embed-text {
    color: var(--color-text-secondary);
    font-size: var(--text-sm);
    font-weight: 500;
  }

  /* Error state */
  .embed-error {
    padding: var(--space-2xl) var(--space-lg);
    text-align: center;
    background: var(--color-surface);
  }

  .error-icon {
    font-size: var(--text-3xl);
    opacity: 0.5;
    margin-bottom: var(--space-sm);
  }

  .embed-error p {
    color: var(--color-text-secondary);
    margin: 0 0 var(--space-md) 0;
    font-size: var(--text-sm);
  }

  .fallback-link {
    color: var(--color-accent);
    text-decoration: none;
    font-size: var(--text-sm);
    font-weight: 500;
  }

  .fallback-link:hover {
    text-decoration: underline;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .spotify-embed {
      margin: var(--space-lg) 0;
    }

    .embed-error {
      padding: var(--space-xl) var(--space-md);
    }
  }
</style>