---
import ContentWithEmbeds from './ContentWithEmbeds.astro';

export interface Props {
  post: any;
  maxWords: number;
}

const { post, maxWords } = Astro.props;

// Clean text but preserve paragraph structure for display
const cleanText = post.body
  .replace(/---[\s\S]*?---/g, '') // Remove frontmatter if any
  .replace(/<[^>]*>/g, '') // Remove HTML tags
  .replace(/#+\s*/g, '') // Remove headers
  .replace(/\[.*?\]\(.*?\)/g, '') // Remove markdown links
  .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold
  .replace(/\*(.*?)\*/g, '$1') // Remove italic
  .replace(/`(.*?)`/g, '$1') // Remove inline code
  .replace(/^\s*[-*+]\s+/gm, '') // Remove list markers
  .replace(/^\s*\d+\.\s+/gm, '') // Remove numbered list markers
  .replace(/\n\s*\n/g, '\n\n') // Normalize paragraph breaks
  .replace(/\s+/g, ' ') // Normalize whitespace within lines
  .trim();

// For word counting, convert to single line
const wordCountText = cleanText.replace(/\n/g, ' ');
const words = wordCountText.split(/\s+/).filter(word => word.length > 0);
const needsTruncation = words.length > maxWords;

// Debug logging
console.log(`Post: ${post.data.title}`);
console.log(`Word count: ${words.length}, Max words: ${maxWords}, Needs truncation: ${needsTruncation}`);

let displayContent;
if (needsTruncation) {
  // Truncate words first
  const truncatedWords = words.slice(0, maxWords);
  const truncatedText = truncatedWords.join(' ') + '...';
  
  // Split into sentences and group into paragraphs
  const sentences = truncatedText.split(/\.(?:\s|$)/).filter(s => s.trim().length > 0);
  const paragraphs = [];
  let currentParagraph = '';
  
  for (let i = 0; i < sentences.length; i++) {
    const sentence = sentences[i].trim();
    if (sentence) {
      currentParagraph += sentence + (i < sentences.length - 1 ? '. ' : '');
      
      // Create a new paragraph every 3-4 sentences or if we hit natural breaks
      if ((i + 1) % 3 === 0 || i === sentences.length - 1) {
        if (currentParagraph.trim()) {
          paragraphs.push(currentParagraph.trim());
          currentParagraph = '';
        }
      }
    }
  }
  
  displayContent = paragraphs.length > 0 ? paragraphs : [truncatedText];
} else {
  // For non-truncated content, split by double newlines
  const paragraphs = cleanText.split(/\n\n+/).filter(p => p.trim().length > 0);
  displayContent = paragraphs.length > 0 ? paragraphs : [cleanText];
}
---

<div class="truncated-content-wrapper">
  {needsTruncation ? (
    <>
      <div class="prose">
        <div class="truncated-content">
          {displayContent.map((paragraph, index) => (
            <p class="truncated-paragraph">{paragraph}</p>
          ))}
        </div>
      </div>
      <div class="read-more-container">
        <a href={`/posts/${post.slug}`} class="read-more-link">
          <span class="rabbit-icon">üê∞</span>
          <span class="read-more-text">Follow the rabbit hole</span>
          <span class="arrow">‚Üí</span>
        </a>
      </div>
    </>
  ) : (
    <ContentWithEmbeds post={post} />
  )}
</div>

<style>
  .truncated-content-wrapper {
    position: relative;
  }

  .truncated-content {
    /* Match prose spacing and typography */
  }

  .truncated-paragraph {
    line-height: var(--leading-relaxed, 1.75);
    color: var(--color-text-secondary, #666666);
    font-size: var(--text-lg, 1.125rem);
    margin: 0;
  }

  .truncated-paragraph + .truncated-paragraph {
    margin-top: var(--space-lg, 24px);
  }

  .read-more-container {
    margin-top: 2rem;
    text-align: center;
    padding: 1.5rem 0;
  }

  .read-more-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    color: var(--color-text-secondary, #64748b);
    text-decoration: none;
    border-radius: 0.375rem;
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    border: 1px solid var(--color-border, #e2e8f0);
    position: relative;
  }

  .read-more-link:hover {
    color: var(--color-accent, #ea580c);
    border-color: var(--color-accent, #ea580c);
    background: rgba(234, 88, 12, 0.05);
  }

  .rabbit-icon {
    font-size: 1em;
    animation: bounce 3s infinite;
  }

  .read-more-text {
    font-size: 0.875rem;
  }

  .arrow {
    font-size: 0.75em;
    transition: transform 0.2s ease;
    opacity: 0.7;
  }

  .read-more-link:hover .arrow {
    transform: translateX(2px);
    opacity: 1;
  }

  @keyframes bounce {
    0%, 95% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-2px);
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .read-more-link {
      padding: 0.6rem 1.2rem;
      font-size: 0.85rem;
    }
  }
</style>