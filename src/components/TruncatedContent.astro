---
import ContentWithEmbeds from './ContentWithEmbeds.astro';
import { marked } from 'marked';

export interface Props {
  post: any;
  maxWords: number;
}

const { post, maxWords } = Astro.props;

// Remove frontmatter if any
const bodyWithoutFrontmatter = (post.body || '').replace(/^---[\s\S]*?---\n*/g, '');

// Count words in the raw markdown (excluding frontmatter)
const plainTextForCounting = bodyWithoutFrontmatter
  .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Keep link text
  .replace(/[#*`_~]/g, '') // Remove markdown formatting characters
  .replace(/\s+/g, ' ') // Normalize whitespace
  .trim();

const words = plainTextForCounting.split(/\s+/).filter(word => word.length > 0);
const needsTruncation = words.length > maxWords;

// Debug logging
console.log(`Post: ${post.data.title}`);
console.log(`Word count: ${words.length}, Max words: ${maxWords}, Needs truncation: ${needsTruncation}`);

let displayContent;
if (needsTruncation) {
  // Find the position in the original markdown where we should cut
  let wordCount = 0;
  let cutPosition = 0;
  let inLink = false;
  let inCodeBlock = false;
  
  // Simple word-based truncation of markdown
  const lines = bodyWithoutFrontmatter.split('\n');
  let truncatedMarkdown = '';
  
  for (const line of lines) {
    // Skip code blocks entirely if truncating
    if (line.startsWith('```')) {
      inCodeBlock = !inCodeBlock;
      continue;
    }
    if (inCodeBlock) continue;
    
    // Count words in this line
    const lineWords = line
      .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
      .replace(/[#*`_~]/g, '')
      .split(/\s+/)
      .filter(w => w.length > 0);
    
    if (wordCount + lineWords.length <= maxWords) {
      truncatedMarkdown += line + '\n';
      wordCount += lineWords.length;
    } else {
      // Partial line - try to include it up to the word limit
      const wordsNeeded = maxWords - wordCount;
      if (wordsNeeded > 0) {
        // Take first N words from the line (simplified approach)
        const partialLine = lineWords.slice(0, wordsNeeded).join(' ');
        truncatedMarkdown += partialLine + '...';
      } else {
        truncatedMarkdown += '...';
      }
      break;
    }
  }
  
  // Convert markdown to HTML
  displayContent = marked.parse(truncatedMarkdown);
} else {
  // Convert full content to HTML
  displayContent = marked.parse(bodyWithoutFrontmatter);
}
---

<div class="truncated-content-wrapper">
  {needsTruncation ? (
    <>
      <div class="prose">
        <div class="truncated-content" set:html={displayContent} />
      </div>
      <div class="read-more-container">
        <a href={`/posts/${post.slug}`} class="read-more-link">
          <span class="rabbit-icon">üê∞</span>
          <span class="read-more-text">Follow the rabbit hole</span>
          <span class="arrow">‚Üí</span>
        </a>
      </div>
    </>
  ) : (
    <ContentWithEmbeds post={post} />
  )}
</div>

<style>
  .truncated-content-wrapper {
    position: relative;
  }

  .truncated-content {
    /* Match prose spacing and typography */
    line-height: var(--leading-relaxed, 1.75);
    color: var(--color-text-secondary, #666666);
    font-size: var(--text-lg, 1.125rem);
  }

  .truncated-content :global(p) {
    margin: 0 0 var(--space-lg, 24px) 0;
  }

  .truncated-content :global(p:last-child) {
    margin-bottom: 0;
  }

  .truncated-content :global(a) {
    color: var(--color-accent, #ea580c);
    text-decoration: underline;
    text-underline-offset: 2px;
    transition: color 0.2s ease;
  }

  .truncated-content :global(a:hover) {
    color: var(--color-accent-dark, #c2410c);
  }

  .truncated-content :global(strong) {
    font-weight: 600;
    color: var(--color-text-primary, #111111);
  }

  .truncated-content :global(em) {
    font-style: italic;
  }

  .truncated-content :global(code) {
    background: var(--color-surface, #f8fafc);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-family: monospace;
    font-size: 0.875em;
  }

  .truncated-content :global(ul),
  .truncated-content :global(ol) {
    margin: var(--space-md, 16px) 0;
    padding-left: var(--space-lg, 24px);
  }

  .truncated-content :global(li) {
    margin: var(--space-xs, 4px) 0;
  }

  .truncated-content :global(blockquote) {
    border-left: 4px solid var(--color-accent, #ea580c);
    padding-left: var(--space-lg, 24px);
    margin: var(--space-lg, 24px) 0;
    color: var(--color-text-secondary, #666666);
  }

  .truncated-content :global(blockquote strong) {
    color: var(--color-text-secondary);
  }

  .read-more-container {
    margin-top: 2rem;
    text-align: center;
    padding: 1.5rem 0;
  }

  .read-more-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    color: var(--color-text-secondary, #64748b);
    text-decoration: none;
    border-radius: 0.375rem;
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    border: 1px solid var(--color-border, #e2e8f0);
    position: relative;
  }

  .read-more-link:hover {
    color: var(--color-accent, #ea580c);
    border-color: var(--color-accent, #ea580c);
    background: rgba(234, 88, 12, 0.05);
  }

  .rabbit-icon {
    font-size: 1em;
    animation: bounce 3s infinite;
  }

  .read-more-text {
    font-size: 0.875rem;
  }

  .arrow {
    font-size: 0.75em;
    transition: transform 0.2s ease;
    opacity: 0.7;
  }

  .read-more-link:hover .arrow {
    transform: translateX(2px);
    opacity: 1;
  }

  @keyframes bounce {
    0%, 95% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-2px);
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .read-more-link {
      padding: 0.6rem 1.2rem;
      font-size: 0.85rem;
    }
  }
</style>