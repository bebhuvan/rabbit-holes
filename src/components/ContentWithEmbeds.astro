---
// Content renderer with automatic embed processing
import YouTubeEmbed from './YouTubeEmbed.astro';
import VimeoEmbed from './VimeoEmbed.astro';
import TwitterEmbed from './TwitterEmbed.astro';
import CodePenEmbed from './CodePenEmbed.astro';
import SpotifyEmbed from './SpotifyEmbed.astro';
import LinkPreviewDynamic from './LinkPreviewDynamic.astro';

export interface Props {
  post: any;
}

const { post } = Astro.props;

// Helper functions to extract IDs from URLs
function getYouTubeId(url: string): string | undefined {
  if (!url) return undefined;
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
    /youtube\.com\/watch\?.*v=([^&\n?#]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  
  return undefined;
}

function getVimeoId(url: string): string | undefined {
  if (!url) return undefined;
  const match = url.match(/vimeo\.com\/(?:.*\/)?(\d+)/);
  return match ? match[1] : undefined;
}

function getCodePenId(url: string): string | undefined {
  if (!url) return undefined;
  const match = url.match(/codepen\.io\/[^\/]+\/pen\/([^\/\?]+)/);
  return match ? match[1] : undefined;
}

// Check if URL should be embedded
function shouldEmbed(url: string): { type: string; id?: string } | null {
  if (!url) return null;
  try {
    const hostname = new URL(url).hostname.toLowerCase();
  
  if (hostname.includes('youtube.com') || hostname.includes('youtu.be')) {
    const id = getYouTubeId(url);
    return { type: 'youtube', id };
  }
  
  if (hostname.includes('vimeo.com')) {
    const id = getVimeoId(url);
    return { type: 'vimeo', id };
  }
  
  if (hostname.includes('twitter.com') || hostname.includes('x.com')) {
    return { type: 'twitter' };
  }
  
  if (hostname.includes('codepen.io')) {
    const id = getCodePenId(url);
    return { type: 'codepen', id };
  }
  
  if (hostname.includes('spotify.com')) {
    return { type: 'spotify' };
  }
  
  return { type: 'generic' };
  } catch {
    return null;
  }
}

// Process post body to find standalone URLs that weren't already processed by remark plugin
const processedEmbeds: Array<{ url: string; embedInfo: any }> = [];

// First check if the rendered content already has auto-embed divs from remark plugin
const { Content: PostContent } = await post.render();
const renderedHTML = (await PostContent).toString();
const existingEmbeds = new Set<string>();

// Extract URLs that are already processed by remark plugin
const embedDivMatches = renderedHTML.matchAll(/data-url="([^"]+)"/g);
for (const match of embedDivMatches) {
  existingEmbeds.add(match[1]);
}

// Check the raw markdown content for standalone URLs that aren't already processed
const lines = post.body.split('\n');

for (const line of lines) {
  const trimmedLine = line.trim();
  // Check if line is just a URL (standalone URL) and not already processed
  if (trimmedLine.match(/^https?:\/\/[^\s]+$/) && !existingEmbeds.has(trimmedLine)) {
    const embedInfo = shouldEmbed(trimmedLine);
    if (embedInfo) {
      processedEmbeds.push({ url: trimmedLine, embedInfo: { ...embedInfo, url: trimmedLine } });
    }
  }
}
---

<div class="content-with-embeds">
  <!-- First render the normal content -->
  <PostContent />
  
  <!-- Then add embeds for standalone URLs found in the content -->
  <div class="detected-embeds">
    {processedEmbeds.map((embed, index) => {
      const { embedInfo } = embed;
      
      switch (embedInfo.type) {
        case 'youtube':
          if (embedInfo.id) {
            return <YouTubeEmbed videoId={embedInfo.id} title="YouTube Video" />;
          }
          break;
          
        case 'vimeo':
          return <VimeoEmbed url={embedInfo.url} title="Vimeo Video" />;
          
        case 'twitter':
          return <TwitterEmbed url={embedInfo.url} />;
          
        case 'codepen':
          return <CodePenEmbed url={embedInfo.url} />;
          
        case 'spotify':
          return <SpotifyEmbed url={embedInfo.url} />;
          
        default:
          return <LinkPreviewDynamic url={embedInfo.url} />;
      }
    })}
  </div>
</div>

<script>
  // Client-side enhancement for showing embeds
  document.addEventListener('DOMContentLoaded', () => {
    // Find all auto-embed divs created by remark plugin
    const embedDivs = document.querySelectorAll('.auto-embed[data-embed]');
    
    embedDivs.forEach((div) => {
      try {
        const embedData = JSON.parse(div.getAttribute('data-embed') || '{}');
        const url = embedData.url;
        
        // Create the appropriate embed element
        let embedHTML = '';
        
        switch (embedData.type) {
          case 'youtube':
            if (embedData.id) {
              embedHTML = `
                <div class="youtube-embed" style="margin: 2rem 0;">
                  <iframe 
                    width="100%" 
                    height="400" 
                    src="https://www.youtube.com/embed/${embedData.id}" 
                    frameborder="0" 
                    allowfullscreen
                    style="max-width: 100%; border-radius: 8px;"
                  ></iframe>
                </div>`;
            }
            break;
            
          case 'vimeo':
            if (embedData.id) {
              embedHTML = `
                <div class="vimeo-embed" style="margin: 2rem 0;">
                  <iframe 
                    src="https://player.vimeo.com/video/${embedData.id}" 
                    width="100%" 
                    height="400" 
                    frameborder="0" 
                    allowfullscreen
                    style="max-width: 100%; border-radius: 8px;"
                  ></iframe>
                </div>`;
            }
            break;
            
          default:
            // For other types, show as link preview
            embedHTML = `
              <div class="link-preview" style="margin: 2rem 0; padding: 1rem; border: 1px solid var(--color-border, #e2e8f0); border-radius: 8px;">
                <a href="${url}" target="_blank" rel="noopener noreferrer" style="text-decoration: none; color: var(--color-text, #333);">
                  <div style="font-weight: 600; margin-bottom: 0.5rem;">ðŸ”— External Link</div>
                  <div style="font-size: 0.9em; color: var(--color-text-secondary, #666);">${url}</div>
                </a>
              </div>`;
        }
        
        if (embedHTML) {
          // Replace the hidden div with the embed
          div.outerHTML = embedHTML;
        }
      } catch (e) {
        console.warn('Failed to process embed:', e);
      }
    });
  });
</script>

<style>
  .content-with-embeds {
    /* Ensure proper spacing between content and embeds */
  }
  
  .detected-embeds {
    margin-top: var(--space-2xl);
  }
  
  .detected-embeds > * {
    margin-bottom: var(--space-2xl);
  }
  
  .detected-embeds > *:last-child {
    margin-bottom: 0;
  }
  
  .content-with-embeds :global(.standalone-url) {
    margin: var(--space-xl) 0;
    padding: var(--space-lg);
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    text-align: center;
  }
</style>