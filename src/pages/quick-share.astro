---
// Quick share interface - opens in popup from bookmarklet
const url = Astro.url.searchParams.get('url') || '';
const title = Astro.url.searchParams.get('title') || '';
const content = Astro.url.searchParams.get('content') || '';
const context = Astro.url.searchParams.get('context') || '';
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quick Share - Rabbit Holes</title>
  <style>
    :root {
      --bg: #ffffff;
      --text-primary: #111111;
      --text-secondary: #666666;
      --accent: #fb923c;
      --accent-light: #fed7aa;
      --border: #e5e5e5;
      --hover: #f8fafc;
      --success: #10b981;
      --error: #ef4444;
    }

    * {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      padding: 20px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
      background: var(--bg);
      color: var(--text-primary);
      line-height: 1.5;
      font-size: 14px;
    }

    .container {
      max-width: 100%;
    }

    .header {
      text-align: center;
      margin-bottom: 20px;
      padding-bottom: 16px;
      border-bottom: 1px solid var(--border);
    }

    .header h1 {
      font-size: 20px;
      margin: 0 0 8px 0;
      color: var(--accent);
    }

    .source-info {
      background: var(--hover);
      border: 1px solid var(--border);
      border-radius: 8px;
      padding: 16px;
      margin-bottom: 20px;
    }

    .source-url {
      font-size: 12px;
      color: var(--text-secondary);
      word-break: break-all;
      margin-bottom: 8px;
    }

    .source-title {
      font-weight: 600;
      margin-bottom: 8px;
    }

    .selected-content {
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      border-radius: 6px;
      padding: 12px;
      font-style: italic;
      margin-top: 12px;
    }

    .form-group {
      margin-bottom: 16px;
    }

    .form-label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
      font-size: 13px;
    }

    .form-input, .form-textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--border);
      border-radius: 6px;
      font-size: 14px;
      font-family: inherit;
    }

    .form-textarea {
      min-height: 80px;
      resize: vertical;
    }

    .quick-actions {
      display: flex;
      gap: 12px;
      margin-bottom: 20px;
    }

    .btn {
      flex: 1;
      background: var(--accent);
      color: white;
      border: none;
      padding: 12px 16px;
      border-radius: 6px;
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn:hover {
      background: var(--accent-light);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .btn-secondary {
      background: var(--hover);
      color: var(--text-primary);
      border: 1px solid var(--border);
    }

    .btn-secondary:hover {
      background: var(--border);
    }

    .status-message {
      padding: 12px;
      border-radius: 6px;
      margin-bottom: 16px;
      text-align: center;
      display: none;
    }

    .status-success {
      background: rgba(16, 185, 129, 0.1);
      color: var(--success);
      border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .status-error {
      background: rgba(239, 68, 68, 0.1);
      color: var(--error);
      border: 1px solid rgba(239, 68, 68, 0.2);
    }

    .loading-spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid var(--border);
      border-radius: 50%;
      border-top-color: var(--accent);
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .preview {
      background: var(--hover);
      border: 1px solid var(--border);
      border-radius: 8px;
      padding: 16px;
      margin-top: 20px;
      display: none;
    }

    .preview h3 {
      margin-top: 0;
      color: var(--accent);
    }

    .close-btn {
      position: absolute;
      top: 10px;
      right: 15px;
      background: none;
      border: none;
      font-size: 18px;
      cursor: pointer;
      color: var(--text-secondary);
    }
  </style>
</head>
<body>
  <div class="container">
    <button class="close-btn" onclick="window.close()">&times;</button>
    
    <div class="header">
      <h1>üê∞ Quick Share</h1>
      <p>Capture this discovery</p>
    </div>

    <div id="status-message" class="status-message"></div>

    <div class="source-info">
      <div class="source-url" id="source-url">{url}</div>
      <div class="source-title" id="source-title">{title}</div>
      {content && (
        <div class="selected-content">
          <strong>Selected text:</strong><br>
          <span id="selected-content">{content}</span>
        </div>
      )}
    </div>

    <div class="form-group">
      <label class="form-label" for="your-thoughts">Your thoughts (optional)</label>
      <textarea id="your-thoughts" class="form-textarea" 
                placeholder="Why is this interesting? What connections do you see?"></textarea>
    </div>

    <div class="quick-actions">
      <button id="capture-btn" class="btn" onclick="quickCapture()">
        üöÄ Capture & Enhance
      </button>
      <button id="capture-publish-btn" class="btn" onclick="quickCaptureAndPublish()">
        ‚ö° Capture & Publish
      </button>
    </div>

    <div class="quick-actions">
      <button class="btn btn-secondary" onclick="openFullCMS()">
        üìù Open Full CMS
      </button>
      <button class="btn btn-secondary" onclick="window.close()">
        ‚ùå Cancel
      </button>
    </div>

    <div id="preview" class="preview">
      <h3>Preview</h3>
      <div id="preview-content"></div>
    </div>
  </div>

  <script define:vars={{ initialUrl: url, initialTitle: title, initialContent: content, initialContext: context }}>
    let capturedData = null;

    function showStatus(message, type) {
      const statusEl = document.getElementById('status-message');
      statusEl.textContent = message;
      statusEl.className = `status-message status-${type}`;
      statusEl.style.display = 'block';
      
      if (type !== 'loading') {
        setTimeout(() => {
          statusEl.style.display = 'none';
        }, 3000);
      }
    }

    async function quickCapture() {
      const thoughts = document.getElementById('your-thoughts').value;
      const captureBtn = document.getElementById('capture-btn');
      
      captureBtn.disabled = true;
      captureBtn.innerHTML = '<span class="loading-spinner"></span> Capturing...';
      
      showStatus('Capturing and enhancing content...', 'loading');

      try {
        const response = await fetch('/api/quick-capture', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            url: initialUrl,
            content: initialContent + (thoughts ? '\n\nMy thoughts: ' + thoughts : ''),
            context: initialContext,
            publish_immediately: false
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        capturedData = result;
        
        // Show preview
        document.getElementById('preview-content').innerHTML = result.preview;
        document.getElementById('preview').style.display = 'block';
        
        showStatus('Content captured and enhanced! Review below.', 'success');
        
      } catch (error) {
        console.error('Capture failed:', error);
        showStatus('Failed to capture content. Please try again.', 'error');
      } finally {
        captureBtn.disabled = false;
        captureBtn.innerHTML = 'üöÄ Capture & Enhance';
      }
    }

    async function quickCaptureAndPublish() {
      const thoughts = document.getElementById('your-thoughts').value;
      const publishBtn = document.getElementById('capture-publish-btn');
      
      publishBtn.disabled = true;
      publishBtn.innerHTML = '<span class="loading-spinner"></span> Publishing...';
      
      showStatus('Capturing, enhancing, and publishing...', 'loading');

      try {
        const response = await fetch('/api/quick-capture', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            url: initialUrl,
            content: initialContent + (thoughts ? '\n\nMy thoughts: ' + thoughts : ''),
            context: initialContext,
            publish_immediately: true
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        showStatus('üéâ Published successfully! Closing in 3 seconds...', 'success');
        
        setTimeout(() => {
          window.close();
        }, 3000);
        
      } catch (error) {
        console.error('Publish failed:', error);
        showStatus('Failed to publish. Please try again.', 'error');
      } finally {
        publishBtn.disabled = false;
        publishBtn.innerHTML = '‚ö° Capture & Publish';
      }
    }

    function openFullCMS() {
      const cmsUrl = `/cms?url=${encodeURIComponent(initialUrl)}&title=${encodeURIComponent(initialTitle)}&content=${encodeURIComponent(initialContent)}`;
      window.open(cmsUrl, '_blank');
      window.close();
    }
  </script>
</body>
</html>