---
export const prerender = false;
import Base from '../layouts/Base.astro';
---

<Base title="AI Publishing Dashboard - Rabbit Holes">
  <div class="dashboard-container">
    <header class="dashboard-header">
      <h1 class="dashboard-title">üß† AI Publishing Dashboard</h1>
      <p class="dashboard-subtitle">Create and publish content with AI assistance</p>
    </header>

    <div class="dashboard-tabs">
      <button class="tab-btn active" data-tab="single-link">Single Link</button>
      <button class="tab-btn" data-tab="bulk-links">Bulk Links</button>
      <button class="tab-btn" data-tab="prompt">Freeform</button>
      <button class="tab-btn" data-tab="pdf">PDF Upload</button>
    </div>

    <!-- Single Link Tab -->
    <div class="tab-content active" id="single-link">
      <div class="input-section">
        <label for="single-url" class="input-label">URL to Process</label>
        <input type="url" id="single-url" class="url-input" placeholder="https://example.com/article">
        
        <label for="single-prompt" class="input-label">AI Instructions (Optional)</label>
        <textarea id="single-prompt" class="prompt-input" placeholder="Summarize this article focusing on key insights..."></textarea>
        
        <button class="process-btn" onclick="processSingleLink()">
          <span class="btn-text">Process Link</span>
          <span class="btn-loader hidden">Processing...</span>
        </button>
      </div>
      
      <div class="output-section">
        <div class="output-header">
          <h3>Generated Content</h3>
          <div class="output-actions">
            <button class="edit-btn" onclick="toggleEdit()">Edit</button>
            <button class="publish-btn" onclick="publishPost()">Publish</button>
          </div>
        </div>
        <div class="content-preview" id="single-preview">
          <p class="placeholder-text">Processed content will appear here...</p>
        </div>
        <textarea class="content-editor hidden" id="single-editor"></textarea>
      </div>
    </div>

    <!-- Bulk Links Tab -->
    <div class="tab-content" id="bulk-links">
      <div class="input-section">
        <label for="bulk-urls" class="input-label">URLs (one per line, max 10)</label>
        <textarea id="bulk-urls" class="bulk-input" placeholder="https://example.com/article1&#10;https://example.com/article2&#10;https://example.com/article3"></textarea>
        
        <label for="bulk-prompt" class="input-label">AI Instructions (Optional)</label>
        <textarea id="bulk-prompt" class="prompt-input" placeholder="Create a summary post linking these articles..."></textarea>
        
        <button class="process-btn" onclick="processBulkLinks()">
          <span class="btn-text">Process Links</span>
          <span class="btn-loader hidden">Processing...</span>
        </button>
      </div>
      
      <div class="output-section">
        <div class="bulk-results" id="bulk-results">
          <p class="placeholder-text">Processed content will appear here...</p>
        </div>
      </div>
    </div>

    <!-- Freeform Prompt Tab -->
    <div class="tab-content" id="prompt">
      <div class="input-section">
        <label for="freeform-prompt" class="input-label">What would you like to write about?</label>
        <textarea id="freeform-prompt" class="freeform-input" placeholder="Write an article about the future of space exploration..."></textarea>
        
        <div class="prompt-options">
          <label class="option-label">
            <input type="checkbox" id="include-links"> Include relevant links
          </label>
          <label class="option-label">
            <input type="checkbox" id="include-sections"> Add section headings
          </label>
        </div>
        
        <button class="process-btn" onclick="processFreeform()">
          <span class="btn-text">Generate Article</span>
          <span class="btn-loader hidden">Generating...</span>
        </button>
      </div>
      
      <div class="output-section">
        <div class="output-header">
          <h3>Generated Article</h3>
          <div class="output-actions">
            <button class="edit-btn" onclick="toggleEdit('freeform')">Edit</button>
            <button class="publish-btn" onclick="publishPost('freeform')">Publish</button>
          </div>
        </div>
        <div class="content-preview" id="freeform-preview">
          <p class="placeholder-text">Generated article will appear here...</p>
        </div>
        <textarea class="content-editor hidden" id="freeform-editor"></textarea>
      </div>
    </div>

    <!-- PDF Upload Tab -->
    <div class="tab-content" id="pdf">
      <div class="input-section">
        <label for="pdf-upload" class="input-label">Upload PDF</label>
        <div class="file-upload-area" onclick="document.getElementById('pdf-upload').click()">
          <input type="file" id="pdf-upload" accept=".pdf" style="display: none;" onchange="handleFileUpload(this)">
          <div class="upload-placeholder">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14,2 14,8 20,8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10,9 9,9 8,9"></polyline>
            </svg>
            <p>Click to upload PDF or drag and drop</p>
            <span class="file-info">‚ö†Ô∏è Limited support - see output for details</span>
          </div>
        </div>
        
        <div class="feature-notice">
          <p><strong>Note:</strong> PDF processing has technical limitations. The system will explain alternatives when you upload a file.</p>
        </div>
        
        <label for="pdf-prompt" class="input-label">AI Instructions (Optional)</label>
        <textarea id="pdf-prompt" class="prompt-input" placeholder="Summarize the key findings from this paper..."></textarea>
        
        <button class="process-btn" onclick="processPDF()">
          <span class="btn-text">Process PDF</span>
          <span class="btn-loader hidden">Processing...</span>
        </button>
      </div>
      
      <div class="output-section">
        <div class="output-header">
          <h3>Extracted Content</h3>
          <div class="output-actions">
            <button class="edit-btn" onclick="toggleEdit('pdf')">Edit</button>
            <button class="publish-btn" onclick="publishPost('pdf')">Publish</button>
          </div>
        </div>
        <div class="content-preview" id="pdf-preview">
          <p class="placeholder-text">Processed PDF content will appear here...</p>
        </div>
        <textarea class="content-editor hidden" id="pdf-editor"></textarea>
      </div>
    </div>
  </div>

  <style>
    .dashboard-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: var(--space-3xl) var(--space-lg);
    }

    .dashboard-header {
      text-align: center;
      margin-bottom: var(--space-3xl);
    }

    .dashboard-title {
      font-size: var(--text-4xl);
      font-weight: 700;
      color: var(--color-text-primary);
      margin-bottom: var(--space-sm);
    }

    .dashboard-subtitle {
      color: var(--color-text-secondary);
      font-size: var(--text-lg);
      margin: 0;
    }

    .dashboard-tabs {
      display: flex;
      gap: var(--space-xs);
      margin-bottom: var(--space-2xl);
      border-bottom: 1px solid var(--color-border);
    }

    .tab-btn {
      padding: var(--space-md) var(--space-lg);
      background: none;
      border: none;
      font-size: var(--text-sm);
      font-weight: 500;
      color: var(--color-text-tertiary);
      cursor: pointer;
      border-bottom: 2px solid transparent;
      transition: all 0.2s ease;
    }

    .tab-btn:hover {
      color: var(--color-text-secondary);
    }

    .tab-btn.active {
      color: var(--color-accent);
      border-bottom-color: var(--color-accent);
    }

    .tab-content {
      display: none;
      grid-template-columns: 1fr 1fr;
      gap: var(--space-3xl);
      align-items: start;
    }

    .tab-content.active {
      display: grid;
    }

    .input-section {
      background: var(--color-surface);
      padding: var(--space-2xl);
      border-radius: var(--radius-lg);
      border: 1px solid var(--color-border);
    }

    .input-label {
      display: block;
      font-size: var(--text-sm);
      font-weight: 600;
      color: var(--color-text-secondary);
      margin-bottom: var(--space-sm);
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .url-input, .prompt-input, .bulk-input, .freeform-input {
      width: 100%;
      padding: var(--space-md);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      font-size: var(--text-base);
      font-family: inherit;
      background: var(--color-bg);
      color: var(--color-text-primary);
      margin-bottom: var(--space-lg);
      transition: border-color 0.2s ease;
    }

    .url-input:focus, .prompt-input:focus, .bulk-input:focus, .freeform-input:focus {
      outline: none;
      border-color: var(--color-accent);
    }

    .prompt-input {
      min-height: 80px;
      resize: vertical;
    }

    .bulk-input, .freeform-input {
      min-height: 120px;
      resize: vertical;
    }

    .prompt-options {
      margin-bottom: var(--space-lg);
    }

    .option-label {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      margin-bottom: var(--space-sm);
      font-size: var(--text-sm);
      color: var(--color-text-secondary);
      cursor: pointer;
    }

    .file-upload-area {
      border: 2px dashed var(--color-border);
      border-radius: var(--radius-md);
      padding: var(--space-3xl);
      text-align: center;
      cursor: pointer;
      transition: all 0.2s ease;
      margin-bottom: var(--space-lg);
    }

    .file-upload-area:hover {
      border-color: var(--color-accent);
      background: var(--color-surface);
    }

    .upload-placeholder svg {
      color: var(--color-text-tertiary);
      margin-bottom: var(--space-md);
    }

    .upload-placeholder p {
      color: var(--color-text-secondary);
      margin-bottom: var(--space-xs);
    }

    .file-info {
      color: var(--color-text-tertiary);
      font-size: var(--text-xs);
    }

    .feature-notice {
      background: var(--color-surface);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-sm);
      padding: var(--space-md);
      margin-bottom: var(--space-lg);
    }

    .feature-notice p {
      margin: 0;
      font-size: var(--text-sm);
      color: var(--color-text-secondary);
    }

    .process-btn {
      width: 100%;
      padding: var(--space-md) var(--space-lg);
      background: var(--color-accent);
      color: white;
      border: none;
      border-radius: var(--radius-md);
      font-size: var(--text-base);
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
    }

    .process-btn:hover {
      background: var(--color-accent-light);
      transform: translateY(-1px);
    }

    .process-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .btn-loader {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
    }

    .output-section {
      background: var(--color-bg);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-lg);
      overflow: hidden;
    }

    .output-header {
      background: var(--color-surface);
      padding: var(--space-lg) var(--space-xl);
      border-bottom: 1px solid var(--color-border);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .output-header h3 {
      font-size: var(--text-lg);
      font-weight: 600;
      color: var(--color-text-primary);
      margin: 0;
    }

    .output-actions {
      display: flex;
      gap: var(--space-sm);
    }

    .edit-btn, .publish-btn {
      padding: var(--space-xs) var(--space-md);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-sm);
      font-size: var(--text-sm);
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .edit-btn {
      background: var(--color-bg);
      color: var(--color-text-secondary);
    }

    .edit-btn:hover {
      color: var(--color-accent);
      border-color: var(--color-accent);
    }

    .publish-btn {
      background: var(--color-accent);
      color: white;
      border-color: var(--color-accent);
    }

    .publish-btn:hover {
      background: var(--color-accent-light);
    }

    .content-preview, .content-editor {
      padding: var(--space-xl);
      min-height: 400px;
    }

    .content-editor {
      width: 100%;
      border: none;
      font-family: ui-monospace, 'SF Mono', monospace;
      font-size: var(--text-sm);
      line-height: 1.6;
      background: var(--color-bg);
      color: var(--color-text-primary);
      resize: vertical;
    }

    .content-editor:focus {
      outline: none;
    }

    .placeholder-text {
      color: var(--color-text-tertiary);
      font-style: italic;
      text-align: center;
      margin-top: var(--space-3xl);
    }

    .bulk-results {
      padding: var(--space-xl);
    }

    .result-item {
      background: var(--color-surface);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      padding: var(--space-lg);
      margin-bottom: var(--space-lg);
    }

    .result-item:last-child {
      margin-bottom: 0;
    }

    .result-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--space-md);
    }

    .result-title {
      font-weight: 600;
      color: var(--color-text-primary);
    }

    .result-url {
      font-size: var(--text-xs);
      color: var(--color-text-tertiary);
    }

    .hidden {
      display: none !important;
    }

    /* Better mobile responsive design */
    @media (max-width: 768px) {
      .dashboard-container {
        padding: var(--space-xl) var(--space-sm);
      }

      .dashboard-title {
        font-size: var(--text-2xl);
      }

      .dashboard-tabs {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--space-xs);
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
      }

      .tab-btn {
        font-size: var(--text-xs);
        padding: var(--space-sm) var(--space-md);
        white-space: nowrap;
      }

      .tab-content {
        grid-template-columns: 1fr;
        gap: var(--space-xl);
      }

      .input-section, .output-section {
        padding: var(--space-md);
      }

      .output-header {
        flex-direction: column;
        gap: var(--space-sm);
        align-items: stretch;
      }

      .output-actions {
        width: 100%;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
      }

      .content-preview, .content-editor {
        min-height: 300px;
        padding: var(--space-md);
      }

      .file-upload-area {
        padding: var(--space-xl);
      }

      /* Notification positioning */
      .notification {
        right: 10px !important;
        left: 10px !important;
        max-width: none !important;
      }
    }

    @media (max-width: 480px) {
      .dashboard-tabs {
        grid-template-columns: 1fr;
      }

      .process-btn {
        padding: var(--space-sm) var(--space-md);
        font-size: var(--text-sm);
      }
    }
  </style>

  <script>
    // Check if running locally and warn user
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      const warningDiv = document.createElement('div');
      warningDiv.innerHTML = `
        <div style="
          background: #fbbf24; 
          color: #92400e; 
          padding: 16px; 
          margin: 16px; 
          border-radius: 8px; 
          text-align: center;
          font-weight: 500;
        ">
          ‚ö†Ô∏è <strong>Local Development Warning:</strong> The AI CMS functions require Cloudflare Workers. 
          Please visit <a href="https://bhuvan.dev/xyz" style="color: #92400e; text-decoration: underline;">https://bhuvan.dev/xyz</a> to use the AI features.
        </div>
      `;
      document.querySelector('.dashboard-container').prepend(warningDiv);
    }

    // Notification system for better error handling
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification--${type}`;
      notification.innerHTML = `
        <div class="notification-content">
          <span class="notification-icon">${type === 'error' ? '‚ö†Ô∏è' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è'}</span>
          <span class="notification-message">${message}</span>
        </div>
      `;
      
      // Style the notification
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'error' ? 'var(--color-error)' : type === 'success' ? 'var(--color-success)' : 'var(--color-accent)'};
        color: white;
        padding: 16px 24px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1000;
        animation: slideIn 0.3s ease;
        max-width: 400px;
      `;
      
      document.body.appendChild(notification);
      
      // Auto remove after 5 seconds
      setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
      }, 5000);
    }
    
    // Add CSS animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
      .notification-content {
        display: flex;
        align-items: center;
        gap: 12px;
      }
      .loading-spinner {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255,255,255,0.3);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
      }
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
    
    // Clean up event listeners to prevent memory leaks
    const cleanupListeners = [];
    
    // Tab switching
    document.querySelectorAll('.tab-btn').forEach(btn => {
      const clickHandler = () => {
        const tabId = btn.dataset.tab;
        
        // Update active tab button
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Update active tab content
        document.querySelectorAll('.tab-content').forEach(content => {
          content.classList.remove('active');
        });
        document.getElementById(tabId).classList.add('active');
      };
      
      btn.addEventListener('click', clickHandler);
      cleanupListeners.push(() => btn.removeEventListener('click', clickHandler));
    });

    // Improved processing functions with better error handling
    async function processSingleLink() {
      const url = document.getElementById('single-url').value.trim();
      const prompt = document.getElementById('single-prompt').value.trim();
      
      if (!url) {
        showNotification('Please enter a URL', 'error');
        return;
      }
      
      // Validate URL format
      try {
        new URL(url);
      } catch {
        showNotification('Please enter a valid URL', 'error');
        return;
      }
      
      showLoading('single-link');
      
      try {
        const response = await fetch('/api/process-link', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ url, prompt }),
          signal: AbortSignal.timeout(30000) // 30 second timeout
        });
        
        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || `Server error: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
          displayResult('single-preview', result.content);
          document.getElementById('single-editor').value = result.content;
          showNotification('Content processed successfully!', 'success');
        } else {
          throw new Error(result.error || 'Processing failed');
        }
      } catch (error) {
        console.error('Process link error:', error);
        
        if (error.name === 'AbortError') {
          showNotification('Request timed out. Please try again.', 'error');
        } else if (error.message.includes('429')) {
          showNotification('Rate limit exceeded. Please wait a minute.', 'error');
        } else {
          showNotification(error.message || 'Failed to process link', 'error');
        }
        
        displayError('single-preview', 'Unable to process this URL. Please check the link and try again.');
      } finally {
        hideLoading('single-link');
      }
    }

    async function processBulkLinks() {
      const urls = document.getElementById('bulk-urls').value.split('\n').filter(url => url.trim());
      const prompt = document.getElementById('bulk-prompt').value;
      
      if (urls.length === 0) {
        alert('Please enter at least one URL');
        return;
      }
      
      if (urls.length > 10) {
        alert('Maximum 10 URLs allowed');
        return;
      }
      
      showLoading('bulk-links');
      
      try {
        const response = await fetch('/api/process-bulk', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ urls, prompt })
        });
        
        const results = await response.json();
        displayBulkResults(results);
      } catch (error) {
        displayError('bulk-results', 'Failed to process links');
      } finally {
        hideLoading('bulk-links');
      }
    }

    async function processFreeform() {
      const prompt = document.getElementById('freeform-prompt').value;
      const includeLinks = document.getElementById('include-links').checked;
      const includeSections = document.getElementById('include-sections').checked;
      
      if (!prompt.trim()) {
        alert('Please enter a prompt');
        return;
      }
      
      showLoading('prompt');
      
      try {
        const response = await fetch('/api/generate-content', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ prompt, includeLinks, includeSections })
        });
        
        const result = await response.json();
        displayResult('freeform-preview', result.content);
      } catch (error) {
        displayError('freeform-preview', 'Failed to generate content');
      } finally {
        hideLoading('prompt');
      }
    }

    async function processPDF() {
      const fileInput = document.getElementById('pdf-upload');
      const prompt = document.getElementById('pdf-prompt').value;
      
      if (!fileInput.files[0]) {
        alert('Please upload a PDF file');
        return;
      }
      
      showLoading('pdf');
      
      const formData = new FormData();
      formData.append('pdf', fileInput.files[0]);
      formData.append('prompt', prompt);
      
      try {
        const response = await fetch('/api/process-pdf', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        displayResult('pdf-preview', result.content);
      } catch (error) {
        displayError('pdf-preview', 'Failed to process PDF');
      } finally {
        hideLoading('pdf');
      }
    }

    function showLoading(tabId) {
      const tab = document.getElementById(tabId);
      const btn = tab.querySelector('.process-btn');
      const btnText = btn.querySelector('.btn-text');
      const btnLoader = btn.querySelector('.btn-loader');
      
      btn.disabled = true;
      btnText.classList.add('hidden');
      btnLoader.classList.remove('hidden');
    }

    function hideLoading(tabId) {
      const tab = document.getElementById(tabId);
      const btn = tab.querySelector('.process-btn');
      const btnText = btn.querySelector('.btn-text');
      const btnLoader = btn.querySelector('.btn-loader');
      
      btn.disabled = false;
      btnText.classList.remove('hidden');
      btnLoader.classList.add('hidden');
    }

    function displayResult(previewId, content) {
      const preview = document.getElementById(previewId);
      preview.innerHTML = `<div class="generated-content">${content}</div>`;
    }

    function displayError(containerId, message) {
      const container = document.getElementById(containerId);
      container.innerHTML = `<p class="error-text" style="color: var(--color-error); text-align: center; margin-top: var(--space-3xl);">${message}</p>`;
    }

    function displayBulkResults(results) {
      const container = document.getElementById('bulk-results');
      container.innerHTML = results.map(result => `
        <div class="result-item">
          <div class="result-header">
            <div class="result-title">${result.title}</div>
            <div class="result-url">${result.url}</div>
          </div>
          <div class="result-content">${result.content}</div>
          <div class="result-actions" style="margin-top: var(--space-md);">
            <button class="edit-btn" onclick="editResult(this)">Edit</button>
            <button class="publish-btn" onclick="publishResult(this)">Publish</button>
          </div>
        </div>
      `).join('');
    }

    function toggleEdit(tabType = 'single') {
      const preview = document.getElementById(`${tabType}-preview`);
      const editor = document.getElementById(`${tabType}-editor`);
      const editBtn = event.target;
      
      if (!preview || !editor) {
        console.error('Preview or editor element not found');
        return;
      }
      
      if (editor.classList.contains('hidden')) {
        // Switch to editor mode
        const content = preview.querySelector('.generated-content');
        if (content) {
          editor.value = content.innerHTML.trim();
        } else {
          showNotification('No content to edit', 'error');
          return;
        }
        preview.classList.add('hidden');
        editor.classList.remove('hidden');
        editBtn.textContent = 'Preview';
        editor.focus();
      } else {
        // Switch back to preview mode
        if (editor.value.trim()) {
          displayResult(`${tabType}-preview`, editor.value);
        }
        preview.classList.remove('hidden');
        editor.classList.add('hidden');
        editBtn.textContent = 'Edit';
      }
    }

    async function publishPost(tabType = 'single') {
      const preview = document.getElementById(`${tabType}-preview`);
      const content = preview.innerHTML;
      
      if (!content || content.includes('placeholder-text')) {
        alert('No content to publish');
        return;
      }
      
      try {
        const response = await fetch('/api/publish-post', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ content })
        });
        
        if (response.ok) {
          alert('Post published successfully!');
        } else {
          alert('Failed to publish post');
        }
      } catch (error) {
        alert('Failed to publish post');
      }
    }

    function handleFileUpload(input) {
      const file = input.files[0];
      if (file) {
        const uploadArea = input.parentElement;
        uploadArea.querySelector('p').textContent = `Selected: ${file.name}`;
      }
    }
  </script>
</Base>