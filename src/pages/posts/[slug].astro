---
import { getCollection } from 'astro:content';
import Base from '../../layouts/Base.astro';
import PostCard from '../../components/PostCard.astro';
import { getRelatedPosts, formatRelatedPostReasons } from '../../utils/relatedPosts';
import { formatDate, calculateReadingTime } from '../../utils/shared';

export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return data.published !== false;
  });
  
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post }
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Get all posts for related posts algorithm
const allPosts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Use advanced related posts algorithm
const relatedPostsWithScores = getRelatedPosts(post, allPosts, 3);

// Format date

// Structured data for individual posts
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": post.data.description || `A ${post.data.type} post about ${post.data.title}`,
  "author": {
    "@type": "Person",
    "name": "Bhuvan",
    "url": "https://bhuvan.dev/about"
  },
  "datePublished": post.data.date,
  "dateModified": post.data.date,
  "publisher": {
    "@type": "Organization",
    "name": "Bhuvan's Blog",
    "logo": {
      "@type": "ImageObject",
      "url": "https://bhuvan.dev/favicon.svg"
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `https://bhuvan.dev/posts/${post.slug}`
  },
  "keywords": post.data.tags?.join(', ') || '',
  "articleSection": post.data.type,
  ...(post.data.url && { "url": post.data.url })
};
---

<Base 
  title={post.data.title} 
  description={post.data.description}
  image={post.data.image}
>
  <!-- Structured Data for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
  <article class="post-page">
    <div class="post-container">
      <!-- Post Header -->
      <header class="post-header">
        <div class="post-meta">
          <span class={`post-type-badge ${post.data.type}`}>
            {post.data.type}
          </span>
          <time class="post-date">{formatDate(new Date(post.data.date))}</time>
          <span class="post-reading-time">{calculateReadingTime(post.body || '')} min read</span>
        </div>
        
        <h1 class="post-title">{post.data.title}</h1>
        
        {post.data.description && (
          <p class="post-description">{post.data.description}</p>
        )}
        
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="post-tags">
            {post.data.tags.map((tag: string) => (
              <a href={`/tags/${tag}`} class="tag">#{tag}</a>
            ))}
          </div>
        )}
      </header>

      <!-- Post Content -->
      <div class="post-content">
        <PostCard post={post} showExcerpt={false} />
      </div>

      <!-- Post Actions -->
      <div class="post-actions">
        <div class="action-buttons">
          <button class="copy-link-btn" onclick={`copyToClipboard('${new URL(`/posts/${post.slug}`, Astro.url).href}')`}>
            üìã Copy Link
          </button>
          <button class="share-btn" onclick={`sharePost('${post.data.title.replace(/'/g, "\\'")}', '/posts/${post.slug}')`}>
            üì§ Share Post
          </button>
        </div>
        <a href="/" class="back-link">‚Üê Back to Home</a>
      </div>

      <!-- Related Posts with Intelligence -->
      {relatedPostsWithScores.length > 0 && (
        <section class="related-posts">
          <h2>Related Posts</h2>
          <div class="related-posts-grid">
            {relatedPostsWithScores.map(({ post: relatedPost, score, reasons }) => (
              <article class="related-post-card">
                <div class="related-post-meta">
                  <span class={`post-type-indicator ${relatedPost.data.type}`}></span>
                  <span class="related-post-date">
                    {formatDate(new Date(relatedPost.data.date))}
                  </span>
                  <span class="similarity-score" title={`Similarity: ${score} - ${formatRelatedPostReasons(reasons)}`}>
                    {score > 15 ? 'üî•' : score > 10 ? '‚ú®' : 'üîó'}
                  </span>
                </div>
                <h3 class="related-post-title">
                  <a href={`/posts/${relatedPost.slug}`}>
                    {relatedPost.data.title}
                  </a>
                </h3>
                {relatedPost.data.description && (
                  <p class="related-post-description">
                    {relatedPost.data.description}
                  </p>
                )}
                <div class="similarity-reasons">
                  {formatRelatedPostReasons(reasons)}
                </div>
              </article>
            ))}
          </div>
        </section>
      )}
    </div>
  </article>

  <style>
    .post-page {
      min-height: 100vh;
    }

    .post-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 60px 24px 80px;
    }

    /* Post Header */
    .post-header {
      margin-bottom: 48px;
      text-align: center;
    }

    .post-meta {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 16px;
      margin-bottom: 24px;
    }

    .post-type-badge {
      padding: 6px 12px;
      border-radius: 16px;
      font-size: 13px;
      font-weight: 600;
      text-transform: capitalize;
      color: white;
    }

    .post-type-badge.musing { background: var(--yellow); color: var(--text-primary); }
    .post-type-badge.link { background: var(--blue); }
    .post-type-badge.video { background: var(--pink); }
    .post-type-badge.music { background: var(--green); }

    .post-date {
      color: var(--text-tertiary);
      font-size: 14px;
      font-weight: 500;
    }

    .post-title {
      font-size: 42px;
      font-weight: 700;
      line-height: 1.2;
      margin-bottom: 20px;
      color: var(--text-primary);
      letter-spacing: -0.02em;
    }

    .post-description {
      font-size: 20px;
      color: var(--text-secondary);
      line-height: 1.6;
      margin-bottom: 32px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .post-tags {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 12px;
    }

    .tag {
      display: inline-block;
      padding: 8px 16px;
      background: var(--hover);
      color: var(--text-secondary);
      text-decoration: none;
      font-size: 14px;
      border-radius: 20px;
      border: 1px solid var(--border);
      transition: all 0.2s ease;
      font-family: monospace;
    }

    .tag:hover {
      background: var(--accent);
      color: white;
      border-color: var(--accent);
      transform: translateY(-1px);
    }

    /* Post Content */
    .post-content {
      margin-bottom: 48px;
    }

    /* Post Actions */
    .post-actions {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 24px 0;
      border-top: 1px solid var(--border);
      border-bottom: 1px solid var(--border);
      margin-bottom: 48px;
      gap: 12px;
    }

    .action-buttons {
      display: flex;
      gap: 12px;
    }

    .copy-link-btn,
    .share-btn {
      background: var(--accent);
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .copy-link-btn:hover,
    .share-btn:hover {
      background: var(--accent-light);
      transform: translateY(-1px);
    }

    .back-link {
      color: var(--text-secondary);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.2s ease;
    }

    .back-link:hover {
      color: var(--accent);
    }

    /* Related Posts */
    .related-posts {
      margin-top: 60px;
    }

    .related-posts h2 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 32px;
      color: var(--text-primary);
      text-align: center;
    }

    .related-posts-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 24px;
    }

    .related-post-card {
      background: var(--hover);
      border: 1px solid var(--border);
      border-radius: 12px;
      padding: 20px;
      transition: all 0.2s ease;
    }

    .related-post-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .related-post-meta {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 12px;
    }

    .post-type-indicator {
      width: 12px;
      height: 12px;
      border-radius: 2px;
    }

    .post-type-indicator.musing { background: var(--yellow); }
    .post-type-indicator.link { background: var(--blue); }
    .post-type-indicator.video { background: var(--pink); }
    .post-type-indicator.music { background: var(--green); }

    .related-post-date {
      color: var(--text-tertiary);
      font-size: 12px;
    }

    .related-post-title {
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 8px;
      line-height: 1.3;
    }

    .related-post-title a {
      color: var(--text-primary);
      text-decoration: none;
      transition: color 0.2s ease;
    }

    .related-post-title a:hover {
      color: var(--accent);
    }

    .related-post-description {
      color: var(--text-secondary);
      font-size: 14px;
      line-height: 1.5;
      margin-bottom: 8px;
    }
    
    .similarity-score {
      font-size: 16px;
      cursor: help;
    }
    
    .similarity-reasons {
      color: var(--text-tertiary);
      font-size: 12px;
      line-height: 1.4;
      font-style: italic;
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .post-container {
        padding: 40px 20px 60px;
      }

      .post-title {
        font-size: 32px;
      }

      .post-description {
        font-size: 18px;
      }

      .post-actions {
        flex-direction: column;
        gap: 16px;
        text-align: center;
      }

      .related-posts-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <script>
    // Share functionality
    function sharePost(title, url) {
      console.log('Share button clicked:', title, url);
      const fullUrl = window.location.origin + url;
      
      if (navigator.share) {
        navigator.share({
          title: title,
          url: fullUrl
        }).catch(err => {
          console.log('Error sharing:', err);
          copyToClipboard(fullUrl);
        });
      } else {
        copyToClipboard(fullUrl);
      }
    }

    function copyToClipboard(text) {
      console.log('Copy to clipboard:', text);
      if (navigator.clipboard) {
        navigator.clipboard.writeText(text).then(() => {
          console.log('Link copied to clipboard');
          alert('Link copied to clipboard!');
        }).catch(err => {
          console.error('Failed to copy to clipboard:', err);
          alert('Failed to copy link');
        });
      } else {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.opacity = '0';
        document.body.appendChild(textArea);
        textArea.select();
        try {
          document.execCommand('copy');
          console.log('Link copied to clipboard (legacy method)');
          alert('Link copied to clipboard!');
        } catch (err) {
          console.error('Failed to copy to clipboard:', err);
          alert('Failed to copy link');
        }
        document.body.removeChild(textArea);
      }
    }
    
    // Make functions available globally for onclick handlers
    window.sharePost = sharePost;
    window.copyToClipboard = copyToClipboard;
    
    // Debug: Log when script loads
    console.log('Post page script loaded');
  </script>
</Base>