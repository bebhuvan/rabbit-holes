---
export const prerender = true;

import { getCollection } from 'astro:content';
import Base from '../../layouts/Base.astro';
import PostCard from '../../components/PostCard.astro';
import { getRelatedPosts, formatRelatedPostReasons } from '../../utils/relatedPosts';
import { formatDate, calculateReadingTime } from '../../utils/shared';

export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return data.published !== false;
  });
  
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post }
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Get all posts for related posts algorithm
const allPosts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Use advanced related posts algorithm
const relatedPostsWithScores = getRelatedPosts(post, allPosts, 3);

// Structured data for individual posts
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": post.data.description || `A ${post.data.type} post about ${post.data.title}`,
  "author": {
    "@type": "Person",
    "name": "Bhuvan",
    "url": "https://bhuvan.dev/about"
  },
  "datePublished": post.data.date,
  "dateModified": post.data.date,
  "publisher": {
    "@type": "Organization",
    "name": "Bhuvan's Blog",
    "logo": {
      "@type": "ImageObject",
      "url": "https://bhuvan.dev/favicon.svg"
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `https://bhuvan.dev/posts/${post.slug}`
  },
  "keywords": post.data.tags?.join(', ') || '',
  "articleSection": post.data.type,
  ...(post.data.url && { "url": post.data.url })
};
---

<Base 
  title={post.data.title} 
  description={post.data.description}
  image={post.data.image}
>
  <!-- Structured Data for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
  
  <article class="post-page">
    <div class="container">
      <!-- Post Header -->
      <header class="post-header text-center mb-xl">
        <div class="post-meta flex items-center justify-center gap-md mb-lg">
          <div class="post-type-badge flex items-center gap-xs">
            <span class={`post-type-indicator post-type-indicator--${post.data.type}`}></span>
            <span class="post-type-label text-sm font-semibold uppercase">{post.data.type}</span>
          </div>
          <time class="post-date text-tertiary text-sm font-medium">{formatDate(new Date(post.data.date))}</time>
          <span class="post-reading-time text-tertiary text-sm">{calculateReadingTime(post.body || '')} min read</span>
        </div>
        
        <h1 class="post-title text-4xl font-bold mb-lg">{post.data.title}</h1>
        
        {post.data.description && (
          <p class="post-description text-lg text-secondary mb-lg max-w-2xl mx-auto">{post.data.description}</p>
        )}
      </header>

      <!-- Post Content with integrated actions -->
      <div class="post-content">
        <PostCard post={post} showExcerpt={false} />
        
        <!-- Integrated Post Actions -->
        <div class="post-actions-integrated">
          <div class="post-actions-buttons">
            <button 
              class="action-btn action-btn--copy" 
              onclick={`copyPostLink('/posts/${post.slug}')`}
              title="Copy link to this post"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
                <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
              </svg>
              Copy Link
            </button>
            <button 
              class="action-btn action-btn--share" 
              onclick={`sharePost('${post.data.title.replace(/'/g, "\\'")}', '/posts/${post.slug}')`}
              title="Share this post"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="18" cy="5" r="3"/>
                <circle cx="6" cy="12" r="3"/>
                <circle cx="18" cy="19" r="3"/>
                <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
                <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/>
              </svg>
              Share
            </button>
            <a href="/" class="action-btn action-btn--back" title="Back to home">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M19 12H5"/>
                <path d="M12 19l-7-7 7-7"/>
              </svg>
              View Post
            </a>
          </div>
        </div>
      </div>

      <!-- Related Posts with Intelligence -->
      {relatedPostsWithScores.length > 0 && (
        <section class="related-posts">
          <h2 class="text-2xl font-semibold mb-xl text-center">Related Posts</h2>
          <div class="related-posts-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-lg">
            {relatedPostsWithScores.map(({ post: relatedPost, score, reasons }) => (
              <article class="related-post-card bg-surface border rounded-lg p-lg transition hover-lift">
                <div class="related-post-meta flex items-center gap-xs mb-sm">
                  <span class={`post-type-indicator post-type-indicator--${relatedPost.data.type}`}></span>
                  <span class="related-post-date text-tertiary text-xs">
                    {formatDate(new Date(relatedPost.data.date))}
                  </span>
                  <span class="similarity-score text-base" title={`Similarity: ${score} - ${formatRelatedPostReasons(reasons)}`}>
                    {score > 15 ? 'ðŸ”¥' : score > 10 ? 'âœ¨' : 'ðŸ”—'}
                  </span>
                </div>
                <h3 class="related-post-title text-lg font-semibold mb-xs">
                  <a href={`/posts/${relatedPost.slug}`} class="hover-accent">
                    {relatedPost.data.title}
                  </a>
                </h3>
                {relatedPost.data.description && (
                  <p class="related-post-description text-secondary text-sm mb-xs">
                    {relatedPost.data.description}
                  </p>
                )}
                <div class="similarity-reasons text-tertiary text-xs italic">
                  {formatRelatedPostReasons(reasons)}
                </div>
              </article>
            ))}
          </div>
        </section>
      )}
    </div>
  </article>

  <style>
    .post-page {
      padding: var(--space-2xl) 0;
    }
    
    .post-type-badge {
      padding: var(--space-xs) var(--space-sm);
      background: var(--color-surface);
      border-radius: var(--radius-full);
      border: 1px solid var(--color-border);
    }
    
    .post-type-label {
      color: var(--color-text-secondary);
    }
    
    .post-actions-integrated {
      margin-top: var(--space-2xl);
      padding-top: var(--space-xl);
      border-top: 1px solid var(--color-border);
      background: rgba(251, 146, 60, 0.05); /* Temporary debug background */
    }
    
    .post-actions-buttons {
      display: flex;
      gap: var(--space-sm);
      justify-content: center;
    }
    
    .action-btn {
      display: inline-flex;
      align-items: center;
      gap: var(--space-xs);
      padding: var(--space-sm) var(--space-md);
      background: var(--color-surface);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      color: var(--color-text-secondary);
      font-size: var(--text-sm);
      font-weight: 500;
      text-decoration: none;
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .action-btn:hover {
      background: var(--color-accent-light, #fed7aa);
      border-color: var(--color-accent, #fb923c);
      color: var(--color-accent-hover, #ea580c);
      transform: translateY(-1px);
    }
    
    .action-btn svg {
      width: 16px;
      height: 16px;
    }
    
    .related-posts {
      margin-top: var(--space-3xl);
    }
    
    .related-post-card:hover {
      box-shadow: var(--shadow-md);
    }
    
    .similarity-score {
      cursor: help;
    }
    
    /* Mobile responsive */
    @media (max-width: 768px) {
      .post-page {
        padding: var(--space-xl) 0;
      }
      
      .post-header .post-meta {
        flex-direction: column;
        gap: var(--space-xs);
      }
      
      .post-actions-buttons {
        flex-direction: column;
        gap: var(--space-xs);
      }
      
      .action-btn {
        justify-content: center;
        width: 100%;
      }
      
      .related-posts-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <script type="module">
    import { share } from '/src/scripts/utils.js';
    
    // Make share functions available globally
    window.sharePost = async function(title, url) {
      const result = await share.sharePost(title, url);
      // Share completed
    };
    
    window.copyPostLink = async function(url) {
      const fullUrl = window.location.origin + url;
      const result = await share.copyToClipboard(fullUrl);
      // Copy completed
    };
  </script>
</Base>