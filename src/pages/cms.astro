---
export const prerender = false;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Content Studio - Rabbit Holes</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  
  <style>
    /* Modern CSS Variables */
    :root {
      --bg-primary: #ffffff;
      --bg-secondary: #f8fafc;
      --bg-tertiary: #f1f5f9;
      --text-primary: #0f172a;
      --text-secondary: #475569;
      --text-tertiary: #94a3b8;
      --accent: #fb923c;
      --accent-hover: #ea580c;
      --accent-light: #fed7aa;
      --border: #e2e8f0;
      --border-hover: #cbd5e1;
      --success: #059669;
      --success-bg: #d1fae5;
      --error: #dc2626;
      --error-bg: #fee2e2;
      --warning: #d97706;
      --warning-bg: #fef3c7;
      --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
      --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
      --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      --radius-sm: 0.375rem;
      --radius-md: 0.5rem;
      --radius-lg: 0.75rem;
      --radius-xl: 1rem;
    }

    [data-theme="dark"] {
      --bg-primary: #0f172a;
      --bg-secondary: #1e293b;
      --bg-tertiary: #334155;
      --text-primary: #f8fafc;
      --text-secondary: #cbd5e1;
      --text-tertiary: #64748b;
      --border: #334155;
      --border-hover: #475569;
      --success-bg: #064e3b;
      --error-bg: #7f1d1d;
      --warning-bg: #78350f;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', system-ui, sans-serif;
      background: var(--bg-primary);
      color: var(--text-primary);
      line-height: 1.6;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
      min-height: 100vh;
    }

    /* Header */
    .header {
      text-align: center;
      margin-bottom: 3rem;
    }

    .header h1 {
      font-size: 2.5rem;
      font-weight: 800;
      color: var(--text-primary);
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, var(--accent), #f59e0b);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .header p {
      color: var(--text-secondary);
      font-size: 1.125rem;
    }

    /* Status Messages */
    .status-message {
      margin-bottom: 2rem;
      padding: 1rem 1.25rem;
      border-radius: var(--radius-lg);
      font-weight: 500;
      display: none;
      animation: slideIn 0.3s ease;
    }

    .status-message.success {
      background: var(--success-bg);
      color: var(--success);
      border: 1px solid var(--success);
    }

    .status-message.error {
      background: var(--error-bg);
      color: var(--error);
      border: 1px solid var(--error);
    }

    .status-message.warning {
      background: var(--warning-bg);
      color: var(--warning);
      border: 1px solid var(--warning);
    }

    @keyframes slideIn {
      from { transform: translateY(-10px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }

    /* Main Layout */
    .cms-layout {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 3rem;
      align-items: start;
    }

    @media (max-width: 768px) {
      .cms-layout {
        grid-template-columns: 1fr;
        gap: 2rem;
      }
    }

    /* Card Style */
    .card {
      background: var(--bg-secondary);
      border: 1px solid var(--border);
      border-radius: var(--radius-xl);
      padding: 2rem;
      box-shadow: var(--shadow-sm);
      transition: all 0.2s ease;
    }

    .card:hover {
      box-shadow: var(--shadow-md);
      border-color: var(--border-hover);
    }

    .card h2 {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    /* Form Elements */
    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-label {
      display: block;
      font-weight: 600;
      color: var(--text-secondary);
      margin-bottom: 0.5rem;
      font-size: 0.875rem;
      text-transform: uppercase;
      letter-spacing: 0.025em;
    }

    .form-input, .form-select, .form-textarea {
      width: 100%;
      padding: 0.75rem 1rem;
      border: 1px solid var(--border);
      border-radius: var(--radius-md);
      background: var(--bg-primary);
      color: var(--text-primary);
      font-size: 1rem;
      transition: all 0.2s ease;
      font-family: inherit;
    }

    .form-input:focus, .form-select:focus, .form-textarea:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 3px rgb(251 146 60 / 0.1);
    }

    .form-textarea {
      min-height: 200px;
      resize: vertical;
      font-family: ui-monospace, 'SF Mono', 'Cascadia Code', 'Roboto Mono', monospace;
      line-height: 1.5;
    }

    .form-input::placeholder, .form-textarea::placeholder {
      color: var(--text-tertiary);
    }

    /* Post Type Selection */
    .post-type-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .post-type-option {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem;
      border: 2px solid var(--border);
      border-radius: var(--radius-md);
      background: var(--bg-primary);
      cursor: pointer;
      transition: all 0.2s ease;
      font-weight: 500;
    }

    .post-type-option:hover {
      border-color: var(--accent);
      background: var(--accent-light);
    }

    .post-type-option.active {
      border-color: var(--accent);
      background: var(--accent-light);
      color: var(--accent-hover);
    }

    .post-type-icon {
      font-size: 1.25rem;
    }

    /* Buttons */
    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: var(--radius-md);
      font-weight: 600;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.2s ease;
      text-decoration: none;
      justify-content: center;
      min-height: 44px;
    }

    .btn-primary {
      background: var(--accent);
      color: white;
    }

    .btn-primary:hover:not(:disabled) {
      background: var(--accent-hover);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }

    .btn-secondary {
      background: var(--bg-primary);
      color: var(--text-secondary);
      border: 1px solid var(--border);
    }

    .btn-secondary:hover:not(:disabled) {
      background: var(--bg-tertiary);
      border-color: var(--border-hover);
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none !important;
    }

    .btn-full {
      width: 100%;
    }

    .btn-group {
      display: flex;
      gap: 0.75rem;
      margin-top: 1.5rem;
    }

    /* AI Enhancement Section */
    .ai-section {
      border-top: 1px solid var(--border);
      padding-top: 1.5rem;
      margin-top: 1.5rem;
    }

    .ai-section h3 {
      font-size: 1.125rem;
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    /* Preview Section */
    .preview-area {
      background: var(--bg-primary);
      border: 1px solid var(--border);
      border-radius: var(--radius-lg);
      min-height: 400px;
      padding: 2rem;
      position: relative;
      overflow: hidden;
    }

    .preview-content {
      line-height: 1.7;
    }

    .preview-content h1, .preview-content h2, .preview-content h3 {
      color: var(--text-primary);
      margin-bottom: 1rem;
    }

    .preview-content p {
      color: var(--text-secondary);
      margin-bottom: 1rem;
    }

    .preview-content a {
      color: var(--accent);
      text-decoration: none;
    }

    .preview-content a:hover {
      text-decoration: underline;
    }

    .preview-placeholder {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 300px;
      color: var(--text-tertiary);
      text-align: center;
    }

    .preview-placeholder svg {
      width: 4rem;
      height: 4rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    /* Loading States */
    .loading {
      position: relative;
      overflow: hidden;
    }

    .loading::after {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(251, 146, 60, 0.1), transparent);
      animation: shimmer 1.5s infinite;
    }

    @keyframes shimmer {
      to { left: 100%; }
    }

    .spinner {
      display: inline-block;
      width: 1rem;
      height: 1rem;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Title Input Group */
    .title-input-group {
      display: flex;
      gap: 0.5rem;
      align-items: stretch;
    }

    .title-input-group .form-input {
      flex: 1;
    }

    .btn-title-generate {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0.75rem;
      background: var(--bg-tertiary);
      border: 1px solid var(--border);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      cursor: pointer;
      transition: all 0.2s ease;
      min-width: 44px;
    }

    .btn-title-generate:hover {
      background: var(--accent-light);
      border-color: var(--accent);
      color: var(--accent-hover);
    }

    .btn-title-generate:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    /* Follow-on Section */
    .follow-on-section {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
      border-top: 1px solid var(--border);
      animation: slideDown 0.3s ease;
    }

    @keyframes slideDown {
      from { 
        opacity: 0; 
        transform: translateY(-10px); 
        max-height: 0;
      }
      to { 
        opacity: 1; 
        transform: translateY(0); 
        max-height: 200px;
      }
    }

    .follow-on-section .form-textarea {
      min-height: 100px;
      font-size: 0.875rem;
    }

    /* Tag Input */
    .tag-input-container {
      position: relative;
    }

    .tag-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .tag {
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      padding: 0.25rem 0.75rem;
      background: var(--accent-light);
      color: var(--accent-hover);
      border-radius: var(--radius-sm);
      font-size: 0.875rem;
      font-weight: 500;
    }

    .tag-remove {
      background: none;
      border: none;
      color: inherit;
      cursor: pointer;
      padding: 0;
      font-size: 1rem;
      line-height: 1;
    }

    /* Responsive Design */
    @media (max-width: 640px) {
      .container {
        padding: 1rem 0.75rem;
      }
      
      .header h1 {
        font-size: 2rem;
      }
      
      .card {
        padding: 1.5rem;
      }
      
      .post-type-grid {
        grid-template-columns: 1fr;
      }
      
      .btn-group {
        flex-direction: column;
      }
    }

    /* Utility Classes */
    .text-center { text-align: center; }
    .text-sm { font-size: 0.875rem; }
    .font-medium { font-weight: 500; }
    .font-semibold { font-weight: 600; }
    .hidden { display: none !important; }
    .mb-0 { margin-bottom: 0; }
    .mt-4 { margin-top: 1rem; }
  </style>
</head>

<body>
  <div class="container">
    <!-- Header -->
    <div class="header">
      <h1>🎨 Content Studio</h1>
      <p>Create beautiful posts with AI assistance</p>
    </div>

    <!-- Status Messages -->
    <div id="status-message" class="status-message"></div>

    <!-- Main Layout -->
    <div class="cms-layout">
      <!-- Input Section -->
      <div class="card">
        <h2>
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>
          </svg>
          Create Content
        </h2>

        <!-- Post Type Selection -->
        <div class="form-group">
          <label class="form-label">Content Type</label>
          <div class="post-type-grid">
            <div class="post-type-option active" data-type="musings">
              <span class="post-type-icon">🤔</span>
              <span>Musing</span>
            </div>
            <div class="post-type-option" data-type="links">
              <span class="post-type-icon">🔗</span>
              <span>Link</span>
            </div>
            <div class="post-type-option" data-type="videos">
              <span class="post-type-icon">📹</span>
              <span>Video</span>
            </div>
            <div class="post-type-option" data-type="music">
              <span class="post-type-icon">🎵</span>
              <span>Music</span>
            </div>
          </div>
        </div>

        <!-- Title -->
        <div class="form-group">
          <label for="title" class="form-label">Title</label>
          <div class="title-input-group">
            <input type="text" id="title" class="form-input" placeholder="Enter a compelling title or let AI generate one...">
            <button type="button" id="generate-title-btn" class="btn-title-generate" title="Generate title with AI">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
            </button>
          </div>
        </div>

        <!-- URL (for links/videos/music) -->
        <div class="form-group hidden" id="url-group">
          <label for="url" class="form-label">URL</label>
          <input type="url" id="url" class="form-input" placeholder="https://example.com">
        </div>

        <!-- Content -->
        <div class="form-group">
          <label for="content" class="form-label">Content</label>
          <textarea 
            id="content" 
            class="form-textarea" 
            placeholder="Share your thoughts, insights, or discoveries...&#10;&#10;Write in Markdown for rich formatting."></textarea>
        </div>

        <!-- Tags -->
        <div class="form-group">
          <label for="tags" class="form-label">Tags</label>
          <div class="tag-input-container">
            <div class="tag-list" id="tag-list"></div>
            <input type="text" id="tag-input" class="form-input" placeholder="Add tags (press Enter)">
          </div>
        </div>

        <!-- AI Enhancement Section -->
        <div class="ai-section">
          <h3>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
            AI Enhancement
          </h3>
          
          <div class="btn-group">
            <button id="enhance-btn" class="btn btn-primary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Enhance with AI
            </button>
            <button id="refine-btn" class="btn btn-secondary" disabled>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
              </svg>
              Refine
            </button>
          </div>

          <!-- Follow-on Prompting -->
          <div class="follow-on-section hidden" id="follow-on-section">
            <div class="form-group mb-0">
              <label for="follow-on-prompt" class="form-label">Follow-on Instructions</label>
              <textarea 
                id="follow-on-prompt" 
                class="form-textarea" 
                rows="3"
                placeholder="Not happy with the result? Tell AI how to improve it...&#10;&#10;Examples:&#10;• Make it more technical&#10;• Add more examples&#10;• Make it shorter and punchier&#10;• Focus on practical applications"></textarea>
              <div class="btn-group mt-4">
                <button id="apply-followon-btn" class="btn btn-primary">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M8 12l4 4 4-4"/>
                    <path d="M16 8l-4-4-4 4"/>
                  </svg>
                  Apply Changes
                </button>
                <button id="clear-followon-btn" class="btn btn-secondary">Clear</button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Preview Section -->
      <div class="card">
        <h2>
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
            <circle cx="12" cy="12" r="3"/>
          </svg>
          Preview
        </h2>

        <div class="preview-area" id="preview-area">
          <div class="preview-placeholder">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <p class="font-medium">Preview will appear here</p>
            <p class="text-sm">Start typing or enhance with AI to see your content</p>
          </div>
        </div>

        <div class="btn-group">
          <button id="publish-btn" class="btn btn-primary btn-full" disabled>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 11-7.778 7.778 5.5 5.5 0 017.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"/>
            </svg>
            Publish to Blog
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Refine Modal -->
  <div id="refine-modal" class="hidden" style="
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 1rem;
  ">
    <div style="
      background: var(--bg-primary);
      border-radius: var(--radius-xl);
      padding: 2rem;
      max-width: 500px;
      width: 100%;
      box-shadow: var(--shadow-lg);
    ">
      <h3 style="margin-bottom: 1rem; font-size: 1.25rem; font-weight: 700;">Refine Content</h3>
      <textarea 
        id="refine-instructions" 
        placeholder="How would you like to refine this content?&#10;&#10;Examples:&#10;- Make it more engaging&#10;- Add more technical details&#10;- Simplify the language&#10;- Focus on practical applications"
        style="
          width: 100%;
          min-height: 120px;
          padding: 0.75rem;
          border: 1px solid var(--border);
          border-radius: var(--radius-md);
          background: var(--bg-secondary);
          color: var(--text-primary);
          font-family: inherit;
          resize: vertical;
          margin-bottom: 1.5rem;
        "></textarea>
      <div style="display: flex; gap: 0.75rem;">
        <button id="apply-refinement" class="btn btn-primary" style="flex: 1;">Apply Refinement</button>
        <button id="cancel-refinement" class="btn btn-secondary">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    // Global state
    let currentPostType = 'musings';
    let currentTags = [];
    let isEnhanced = false;

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      initializeEventListeners();
      updatePreview();
    });

    function initializeEventListeners() {
      // Post type selection
      document.querySelectorAll('.post-type-option').forEach(option => {
        option.addEventListener('click', function() {
          document.querySelectorAll('.post-type-option').forEach(opt => opt.classList.remove('active'));
          this.classList.add('active');
          currentPostType = this.dataset.type;
          toggleUrlField();
        });
      });

      // Form inputs
      document.getElementById('title').addEventListener('input', updatePreview);
      document.getElementById('content').addEventListener('input', updatePreview);
      document.getElementById('url').addEventListener('input', updatePreview);

      // Tag input
      document.getElementById('tag-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          addTag(this.value.trim());
          this.value = '';
        }
      });

      // AI buttons
      document.getElementById('generate-title-btn').addEventListener('click', generateTitle);
      document.getElementById('enhance-btn').addEventListener('click', enhanceContent);
      document.getElementById('refine-btn').addEventListener('click', showRefineModal);
      document.getElementById('publish-btn').addEventListener('click', publishContent);
      
      // Follow-on prompting
      document.getElementById('apply-followon-btn').addEventListener('click', applyFollowOn);
      document.getElementById('clear-followon-btn').addEventListener('click', clearFollowOn);

      // Modal buttons
      document.getElementById('apply-refinement').addEventListener('click', applyRefinement);
      document.getElementById('cancel-refinement').addEventListener('click', hideRefineModal);

      // Close modal on outside click
      document.getElementById('refine-modal').addEventListener('click', function(e) {
        if (e.target === this) hideRefineModal();
      });
    }

    function toggleUrlField() {
      const urlGroup = document.getElementById('url-group');
      const needsUrl = ['links', 'videos', 'music'].includes(currentPostType);
      
      if (needsUrl) {
        urlGroup.classList.remove('hidden');
        document.getElementById('url').required = true;
      } else {
        urlGroup.classList.add('hidden');
        document.getElementById('url').required = false;
        document.getElementById('url').value = '';
      }
    }

    function addTag(tagText) {
      if (!tagText || currentTags.includes(tagText)) return;
      
      currentTags.push(tagText);
      renderTags();
      updatePreview();
    }

    function removeTag(tagText) {
      currentTags = currentTags.filter(tag => tag !== tagText);
      renderTags();
      updatePreview();
    }

    function renderTags() {
      const tagList = document.getElementById('tag-list');
      tagList.innerHTML = currentTags.map(tag => `
        <span class="tag">
          ${tag}
          <button type="button" class="tag-remove" onclick="removeTag('${tag}')">&times;</button>
        </span>
      `).join('');
    }

    function updatePreview() {
      const title = document.getElementById('title').value;
      const content = document.getElementById('content').value;
      const url = document.getElementById('url').value;
      const previewArea = document.getElementById('preview-area');

      if (!title && !content) {
        previewArea.innerHTML = `
          <div class="preview-placeholder">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <p class="font-medium">Preview will appear here</p>
            <p class="text-sm">Start typing or enhance with AI to see your content</p>
          </div>
        `;
        return;
      }

      let previewHtml = '<div class="preview-content">';
      
      if (title) {
        previewHtml += `<h1>${escapeHtml(title)}</h1>`;
      }
      
      if (url && ['links', 'videos', 'music'].includes(currentPostType)) {
        const emoji = currentPostType === 'links' ? '🔗' : currentPostType === 'videos' ? '📹' : '🎵';
        previewHtml += `<p><strong>${emoji} Source:</strong> <a href="${escapeHtml(url)}" target="_blank">${escapeHtml(url)}</a></p>`;
      }
      
      if (content) {
        // Simple markdown-like rendering
        const processedContent = content
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
          .replace(/\*(.*?)\*/g, '<em>$1</em>')
          .replace(/\n\n/g, '</p><p>')
          .replace(/\n/g, '<br>');
        previewHtml += `<p>${processedContent}</p>`;
      }

      if (currentTags.length > 0) {
        previewHtml += `<p><small><strong>Tags:</strong> ${currentTags.join(', ')}</small></p>`;
      }
      
      previewHtml += '</div>';
      previewArea.innerHTML = previewHtml;
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function showStatus(message, type = 'success') {
      const statusEl = document.getElementById('status-message');
      statusEl.textContent = message;
      statusEl.className = `status-message ${type}`;
      statusEl.style.display = 'block';
      
      setTimeout(() => {
        statusEl.style.display = 'none';
      }, 5000);
    }

    function setLoading(buttonId, isLoading) {
      const button = document.getElementById(buttonId);
      
      if (!button) return;
      
      if (isLoading) {
        button.disabled = true;
        button.dataset.originalHtml = button.innerHTML;
        
        if (buttonId === 'generate-title-btn') {
          button.innerHTML = '<span class="spinner"></span>';
        } else {
          button.innerHTML = '<span class="spinner"></span> Processing...';
        }
      } else {
        button.disabled = false;
        button.innerHTML = button.dataset.originalHtml || button.innerHTML;
      }
    }

    async function generateTitle() {
      const content = document.getElementById('content').value.trim();
      const url = document.getElementById('url').value.trim();
      
      if (!content && !url) {
        showStatus('Please add some content or URL to generate a title', 'error');
        return;
      }
      
      setLoading('generate-title-btn', true);
      
      try {
        const response = await fetch('/enhance', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            title: '',
            content: content || `Content about: ${url}`,
            type: currentPostType,
            url: url,
            titleOnly: true // Special flag for title generation
          })
        });

        const result = await response.json();

        if (result.success && result.title) {
          document.getElementById('title').value = result.title;
          updatePreview();
          showStatus('Title generated successfully!', 'success');
        } else {
          throw new Error(result.error || 'Title generation failed');
        }
      } catch (error) {
        console.error('Title generation error:', error);
        showStatus('Failed to generate title. Please try again.', 'error');
      } finally {
        setLoading('generate-title-btn', false);
      }
    }

    async function enhanceContent() {
      const title = document.getElementById('title').value;
      const content = document.getElementById('content').value;
      
      if (!content.trim()) {
        showStatus('Please add some content to enhance', 'error');
        return;
      }

      setLoading('enhance-btn', true);

      try {
        const response = await fetch('/enhance', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            title: title || 'Untitled',
            content,
            type: currentPostType,
            url: document.getElementById('url').value
          })
        });

        const result = await response.json();

        if (result.success) {
          // Update form with enhanced content
          if (result.title && result.title !== title) {
            document.getElementById('title').value = result.title;
          }
          
          document.getElementById('content').value = result.content;
          
          if (result.tags && result.tags.length > 0) {
            currentTags = [...new Set([...currentTags, ...result.tags])];
            renderTags();
          }

          updatePreview();
          isEnhanced = true;
          
          // Enable other buttons
          document.getElementById('refine-btn').disabled = false;
          document.getElementById('publish-btn').disabled = false;
          
          // Show follow-on prompting section
          document.getElementById('follow-on-section').classList.remove('hidden');
          
          showStatus('Content enhanced successfully!', 'success');
        } else {
          throw new Error(result.error || 'Enhancement failed');
        }
      } catch (error) {
        console.error('Enhancement error:', error);
        showStatus('Failed to enhance content. Please try again.', 'error');
      } finally {
        setLoading('enhance-btn', false);
      }
    }

    function showRefineModal() {
      document.getElementById('refine-modal').classList.remove('hidden');
      document.getElementById('refine-instructions').focus();
    }

    function hideRefineModal() {
      document.getElementById('refine-modal').classList.add('hidden');
      document.getElementById('refine-instructions').value = '';
    }

    async function applyRefinement() {
      const instructions = document.getElementById('refine-instructions').value.trim();
      
      if (!instructions) {
        showStatus('Please provide refinement instructions', 'error');
        return;
      }

      const content = document.getElementById('content').value;
      
      setLoading('apply-refinement', true);

      try {
        const response = await fetch('/refine', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            content,
            instructions,
            type: currentPostType
          })
        });

        const result = await response.json();

        if (result.success) {
          document.getElementById('content').value = result.content;
          updatePreview();
          hideRefineModal();
          showStatus('Content refined successfully!', 'success');
        } else {
          throw new Error(result.error || 'Refinement failed');
        }
      } catch (error) {
        console.error('Refinement error:', error);
        showStatus('Failed to refine content. Please try again.', 'error');
      } finally {
        setLoading('apply-refinement', false);
      }
    }

    async function applyFollowOn() {
      const followOnPrompt = document.getElementById('follow-on-prompt').value.trim();
      
      if (!followOnPrompt) {
        showStatus('Please provide follow-on instructions', 'error');
        return;
      }

      const currentContent = document.getElementById('content').value;
      const currentTitle = document.getElementById('title').value;
      
      setLoading('apply-followon-btn', true);

      try {
        const response = await fetch('/refine', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            content: currentContent,
            title: currentTitle,
            instructions: followOnPrompt,
            type: currentPostType,
            followOn: true // Flag to indicate this is follow-on prompting
          })
        });

        const result = await response.json();

        if (result.success) {
          // Update content and title if provided
          if (result.title && result.title !== currentTitle) {
            document.getElementById('title').value = result.title;
          }
          
          document.getElementById('content').value = result.content;
          
          // Update tags if provided
          if (result.tags && result.tags.length > 0) {
            currentTags = [...new Set([...currentTags, ...result.tags])];
            renderTags();
          }

          updatePreview();
          
          // Clear the follow-on prompt
          document.getElementById('follow-on-prompt').value = '';
          
          showStatus('Content updated with follow-on instructions!', 'success');
        } else {
          throw new Error(result.error || 'Follow-on refinement failed');
        }
      } catch (error) {
        console.error('Follow-on error:', error);
        showStatus('Failed to apply follow-on instructions. Please try again.', 'error');
      } finally {
        setLoading('apply-followon-btn', false);
      }
    }

    function clearFollowOn() {
      document.getElementById('follow-on-prompt').value = '';
      showStatus('Follow-on prompt cleared', 'success');
    }

    async function publishContent() {
      const title = document.getElementById('title').value.trim();
      const content = document.getElementById('content').value.trim();
      
      if (!title || !content) {
        showStatus('Please fill in title and content before publishing', 'error');
        return;
      }

      // Check URL requirement for certain post types
      const url = document.getElementById('url').value.trim();
      if (['links', 'videos', 'music'].includes(currentPostType) && !url) {
        showStatus(`URL is required for ${currentPostType}`, 'error');
        return;
      }

      setLoading('publish-btn', true);

      try {
        const postData = {
          title,
          content,
          type: currentPostType,
          tags: currentTags,
          url: url || undefined
        };

        const response = await fetch('/publish', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(postData)
        });

        const result = await response.json();

        if (result.success) {
          showStatus('Post published successfully!', 'success');
          
          // Reset form
          setTimeout(() => {
            document.getElementById('title').value = '';
            document.getElementById('content').value = '';
            document.getElementById('url').value = '';
            currentTags = [];
            renderTags();
            updatePreview();
            
            document.getElementById('refine-btn').disabled = true;
            document.getElementById('publish-btn').disabled = true;
            isEnhanced = false;
          }, 2000);
        } else {
          throw new Error(result.error || 'Publishing failed');
        }
      } catch (error) {
        console.error('Publishing error:', error);
        showStatus('Failed to publish post. Please try again.', 'error');
      } finally {
        setLoading('publish-btn', false);
      }
    }

    // Initialize URL field visibility
    toggleUrlField();
  </script>
</body>
</html>