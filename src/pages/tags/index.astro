---
import { getCollection } from 'astro:content';
import Base from '../../layouts/Base.astro';

const posts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Get all tags with their frequencies
const tagFrequency = posts.reduce((acc, post) => {
  post.data.tags.forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// Generate tag cloud with sizes based on frequency
const generateTagCloud = (tags: Record<string, number>) => {
  const maxCount = Math.max(...Object.values(tags));
  const minCount = Math.min(...Object.values(tags));
  
  return Object.entries(tags).map(([tag, count]) => {
    const size = Math.ceil(((count - minCount) / (maxCount - minCount)) * 4) + 1;
    return {
      tag,
      count,
      size: Math.min(size, 5)
    };
  }).sort((a, b) => a.tag.localeCompare(b.tag));
};

const tagCloud = generateTagCloud(tagFrequency);

// Categorize tags (you can customize these categories)
const tagCategories = {
  'Topics': ['science', 'technology', 'philosophy', 'mathematics', 'economics', 'politics'],
  'Media': ['video', 'music', 'podcast', 'book', 'article', 'paper'],
  'Concepts': ['innovation', 'creativity', 'learning', 'discovery', 'thinking', 'growth'],
  'Fields': ['physics', 'biology', 'psychology', 'design', 'history', 'culture']
};

// Get categorized tags
const categorizedTags = Object.entries(tagCategories).map(([category, categoryTags]) => ({
  category,
  tags: categoryTags.filter(tag => tagFrequency[tag]).map(tag => ({
    tag,
    count: tagFrequency[tag]
  }))
})).filter(cat => cat.tags.length > 0);

// Get remaining uncategorized tags
const categorizedTagNames = Object.values(tagCategories).flat();
const uncategorizedTags = Object.entries(tagFrequency)
  .filter(([tag]) => !categorizedTagNames.includes(tag))
  .map(([tag, count]) => ({ tag, count }));
---

<Base title="Tags - Bhuvan's Blog">
  <div class="tags-container">
    <div class="tags-header">
      <h1>Tags</h1>
      <p>Explore {Object.keys(tagFrequency).length} topics across {posts.length} posts</p>
    </div>

    <!-- Tag Cloud -->
    <section class="tag-cloud-section">
      <h2>All Tags</h2>
      <div class="tag-cloud">
        {tagCloud.map(({ tag, count, size }) => (
          <a 
            href={`/tags/${tag}`} 
            class={`tag-cloud-item tag-size-${size}`}
            data-count={count}
          >
            {tag}
          </a>
        ))}
      </div>
    </section>

    <!-- Categorized Tags -->
    {categorizedTags.length > 0 && (
      <section class="tag-categories-section">
        <h2>By Category</h2>
        <div class="tag-categories">
          {categorizedTags.map(({ category, tags }) => (
            <div class="tag-category">
              <h3 class="tag-category-title">{category}</h3>
              <div class="tag-category-list">
                {tags.map(({ tag, count }) => (
                  <a href={`/tags/${tag}`} class="tag-category-item">
                    {tag} <span class="tag-count">({count})</span>
                  </a>
                ))}
              </div>
            </div>
          ))}
        </div>
      </section>
    )}

    <!-- Uncategorized Tags -->
    {uncategorizedTags.length > 0 && (
      <section class="uncategorized-section">
        <h2>Other Topics</h2>
        <div class="uncategorized-tags">
          {uncategorizedTags.map(({ tag, count }) => (
            <a href={`/tags/${tag}`} class="uncategorized-tag">
              {tag} <span class="tag-count">({count})</span>
            </a>
          ))}
        </div>
      </section>
    )}

    <!-- Tag Statistics -->
    <section class="tag-stats">
      <h2>Tag Statistics</h2>
      <div class="stats-grid">
        <div class="stat-item">
          <span class="stat-number">{Object.keys(tagFrequency).length}</span>
          <span class="stat-label">Unique Tags</span>
        </div>
        <div class="stat-item">
          <span class="stat-number">{Math.max(...Object.values(tagFrequency))}</span>
          <span class="stat-label">Most Used</span>
        </div>
        <div class="stat-item">
          <span class="stat-number">{Object.values(tagFrequency).reduce((a, b) => a + b, 0)}</span>
          <span class="stat-label">Total Tags</span>
        </div>
      </div>
    </section>
  </div>

  <style>
    .tags-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 80px 20px;
    }

    .tags-header {
      text-align: center;
      margin-bottom: 60px;
    }

    .tags-header h1 {
      font-size: 36px;
      font-weight: 700;
      margin-bottom: 16px;
      color: var(--text-primary);
    }

    .tags-header p {
      color: var(--text-secondary);
      font-size: 18px;
    }

    /* Sections */
    section {
      margin-bottom: 60px;
    }

    section h2 {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 24px;
      color: var(--text-primary);
    }

    /* Tag Cloud with proper spacing */
    .tag-cloud {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      justify-content: center;
      align-items: baseline;
      line-height: 1.4;
    }

    .tag-cloud-item {
      display: inline-block;
      padding: 10px 16px;
      background: var(--hover);
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 20px;
      border: 1px solid var(--border);
      transition: all 0.2s ease;
      position: relative;
      white-space: nowrap;
      margin: 4px;
    }

    .tag-cloud-item:hover {
      background: var(--accent);
      color: white;
      border-color: var(--accent);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .tag-cloud-item::after {
      content: attr(data-count);
      position: absolute;
      top: -8px;
      right: -8px;
      background: var(--accent);
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
    }

    .tag-cloud-item:hover::after {
      background: var(--text-primary);
    }

    /* Tag sizes based on frequency */
    .tag-size-1 { 
      font-size: 14px; 
      opacity: 0.7;
      padding: 8px 12px;
    }
    .tag-size-2 { 
      font-size: 16px; 
      opacity: 0.8;
      padding: 9px 14px;
    }
    .tag-size-3 { 
      font-size: 18px; 
      opacity: 0.9;
      padding: 10px 16px;
    }
    .tag-size-4 { 
      font-size: 20px; 
      opacity: 1;
      padding: 11px 18px;
    }
    .tag-size-5 { 
      font-size: 24px; 
      opacity: 1; 
      font-weight: 600;
      padding: 12px 20px;
    }

    /* Tag Categories */
    .tag-categories {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 32px;
    }

    .tag-category {
      background: var(--hover);
      padding: 24px;
      border-radius: 12px;
      border: 1px solid var(--border);
      transition: all 0.2s ease;
    }

    .tag-category:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .tag-category-title {
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 16px;
      color: var(--text-primary);
    }

    .tag-category-list {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
    }

    .tag-category-item {
      padding: 6px 12px;
      background: var(--bg);
      border: 1px solid var(--border);
      border-radius: 12px;
      font-size: 13px;
      color: var(--text-secondary);
      text-decoration: none;
      transition: all 0.2s ease;
      white-space: nowrap;
    }

    .tag-category-item:hover {
      background: var(--accent);
      color: white;
      border-color: var(--accent);
    }

    .tag-count {
      color: var(--text-tertiary);
      font-size: 0.9em;
    }

    /* Uncategorized Tags */
    .uncategorized-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
    }

    .uncategorized-tag {
      padding: 8px 16px;
      background: var(--hover);
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 16px;
      border: 1px solid var(--border);
      transition: all 0.2s ease;
      font-size: 14px;
      white-space: nowrap;
    }

    .uncategorized-tag:hover {
      background: var(--accent);
      color: white;
      border-color: var(--accent);
    }

    /* Tag Statistics */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 24px;
    }

    .stat-item {
      background: var(--hover);
      padding: 24px;
      border-radius: 12px;
      text-align: center;
      border: 1px solid var(--border);
    }

    .stat-number {
      font-size: 32px;
      font-weight: 700;
      color: var(--accent);
      display: block;
    }

    .stat-label {
      color: var(--text-secondary);
      font-size: 14px;
      margin-top: 4px;
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .tags-container {
        padding: 60px 16px;
      }

      .tags-header h1 {
        font-size: 28px;
      }

      .tag-cloud {
        gap: 12px;
      }

      .tag-cloud-item {
        margin: 2px;
      }

      .tag-size-1 { font-size: 13px; padding: 6px 10px; }
      .tag-size-2 { font-size: 14px; padding: 7px 12px; }
      .tag-size-3 { font-size: 16px; padding: 8px 14px; }
      .tag-size-4 { font-size: 18px; padding: 9px 16px; }
      .tag-size-5 { font-size: 20px; padding: 10px 18px; }

      .tag-categories {
        grid-template-columns: 1fr;
        gap: 20px;
      }

      .tag-category {
        padding: 20px;
      }
    }
  </style>
</Base>