---
export const prerender = true;

import { getCollection } from 'astro:content';
import Base from '../../layouts/Base.astro';

const posts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Get all tags with their frequencies
const tagFrequency = posts.reduce((acc, post) => {
  post.data.tags.forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// Generate tag cloud with sizes based on frequency
const generateTagCloud = (tags: Record<string, number>) => {
  const maxCount = Math.max(...Object.values(tags));
  const minCount = Math.min(...Object.values(tags));
  
  return Object.entries(tags).map(([tag, count]) => {
    const size = Math.ceil(((count - minCount) / (maxCount - minCount)) * 4) + 1;
    return {
      tag,
      count,
      size: Math.min(size, 5)
    };
  }).sort((a, b) => a.tag.localeCompare(b.tag));
};

const tagCloud = generateTagCloud(tagFrequency);

// Categorize tags (you can customize these categories)
const tagCategories = {
  'Topics': ['science', 'technology', 'philosophy', 'mathematics', 'economics', 'politics'],
  'Media': ['video', 'music', 'podcast', 'book', 'article', 'paper'],
  'Concepts': ['innovation', 'creativity', 'learning', 'discovery', 'thinking', 'growth'],
  'Fields': ['physics', 'biology', 'psychology', 'design', 'history', 'culture']
};

// Get categorized tags
const categorizedTags = Object.entries(tagCategories).map(([category, categoryTags]) => ({
  category,
  tags: categoryTags.filter(tag => tagFrequency[tag]).map(tag => ({
    tag,
    count: tagFrequency[tag]
  }))
})).filter(cat => cat.tags.length > 0);

// Get remaining uncategorized tags
const categorizedTagNames = Object.values(tagCategories).flat();
const uncategorizedTags = Object.entries(tagFrequency)
  .filter(([tag]) => !categorizedTagNames.includes(tag))
  .map(([tag, count]) => ({ tag, count }));
---

<Base title="Tags - Bhuvan's Blog">
  <div class="container tags-page">
    <header class="page-header">
      <h1 class="page-title">Topics</h1>
      <p class="page-subtitle">{Object.keys(tagFrequency).length} topics across {posts.length} posts</p>
    </header>

    <div class="tags-grid">
      <div class="tags-section">
        <h2 class="section-label">All Topics</h2>
        <div class="tags-list">
          {Object.entries(tagFrequency)
            .sort(([,a], [,b]) => b - a)
            .map(([tag, count]) => (
              <a href={`/tags/${tag}`} class="tag-item">
                <span class="tag-name">{tag}</span>
                <span class="tag-count">{count}</span>
              </a>
            ))}
        </div>
      </div>

      <aside class="tags-sidebar">
        <div class="stats-summary">
          <div class="stat">
            <span class="stat-number">{Object.keys(tagFrequency).length}</span>
            <span class="stat-label">Topics</span>
          </div>
          <div class="stat">
            <span class="stat-number">{posts.length}</span>
            <span class="stat-label">Posts</span>
          </div>
        </div>

        <div class="popular-tags">
          <h3 class="sidebar-title">Most Popular</h3>
          <div class="popular-list">
            {Object.entries(tagFrequency)
              .sort(([,a], [,b]) => b - a)
              .slice(0, 5)
              .map(([tag, count]) => (
                <a href={`/tags/${tag}`} class="popular-item">
                  <span class="popular-name">{tag}</span>
                  <span class="popular-count">{count}</span>
                </a>
              ))}
          </div>
        </div>
      </aside>
    </div>
  </div>

  <style>
    .tags-page {
      padding: var(--space-3xl) 0;
    }

    .page-header {
      text-align: center;
      margin-bottom: var(--space-3xl);
    }

    .page-title {
      font-size: var(--text-3xl);
      font-weight: 600;
      color: var(--color-text-primary);
      margin-bottom: var(--space-sm);
    }

    .page-subtitle {
      color: var(--color-text-secondary);
      font-size: var(--text-base);
      margin: 0;
    }

    .tags-grid {
      display: grid;
      grid-template-columns: 1fr 280px;
      gap: var(--space-3xl);
      align-items: start;
    }

    .section-label {
      font-size: var(--text-sm);
      font-weight: 600;
      color: var(--color-text-tertiary);
      text-transform: uppercase;
      letter-spacing: 0.1em;
      margin-bottom: var(--space-xl);
      padding-bottom: var(--space-xs);
      border-bottom: 1px solid var(--color-border);
    }

    .tags-list {
      display: grid;
      gap: 1px;
    }

    .tag-item {
      display: grid;
      grid-template-columns: 1fr auto;
      align-items: center;
      gap: var(--space-md);
      padding: var(--space-md) 0;
      text-decoration: none;
      border-bottom: 1px solid transparent;
      transition: all 0.2s ease;
    }

    .tag-item:hover {
      border-bottom-color: var(--color-border);
      padding-left: var(--space-sm);
    }

    .tag-name {
      font-size: var(--text-base);
      color: var(--color-text-secondary);
      transition: color 0.2s ease;
    }

    .tag-item:hover .tag-name {
      color: var(--color-accent);
    }

    .tag-count {
      font-size: var(--text-xs);
      color: var(--color-text-tertiary);
      background: var(--color-surface);
      padding: var(--space-xs) var(--space-sm);
      border-radius: var(--radius-full);
      font-weight: 600;
      min-width: 24px;
      text-align: center;
    }

    /* Sidebar */
    .tags-sidebar {
      position: sticky;
      top: var(--space-2xl);
    }

    .stats-summary {
      background: var(--color-surface);
      padding: var(--space-xl);
      border-radius: var(--radius-md);
      margin-bottom: var(--space-xl);
      display: flex;
      gap: var(--space-xl);
    }

    .stat {
      text-align: center;
      flex: 1;
    }

    .stat-number {
      display: block;
      font-size: var(--text-2xl);
      font-weight: 700;
      color: var(--color-accent);
      line-height: 1;
    }

    .stat-label {
      font-size: var(--text-xs);
      color: var(--color-text-tertiary);
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-weight: 600;
      margin-top: var(--space-xs);
    }

    .popular-tags {
      background: var(--color-surface);
      padding: var(--space-xl);
      border-radius: var(--radius-md);
    }

    .sidebar-title {
      font-size: var(--text-sm);
      font-weight: 600;
      color: var(--color-text-secondary);
      margin-bottom: var(--space-lg);
      margin-top: 0;
    }

    .popular-list {
      display: flex;
      flex-direction: column;
      gap: var(--space-sm);
    }

    .popular-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: var(--space-sm) 0;
      text-decoration: none;
      border-bottom: 1px solid transparent;
      transition: all 0.2s ease;
    }

    .popular-item:hover {
      border-bottom-color: var(--color-border);
    }

    .popular-name {
      font-size: var(--text-sm);
      color: var(--color-text-secondary);
      transition: color 0.2s ease;
    }

    .popular-item:hover .popular-name {
      color: var(--color-accent);
    }

    .popular-count {
      font-size: var(--text-xs);
      color: var(--color-text-tertiary);
      font-weight: 600;
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .tags-grid {
        grid-template-columns: 1fr;
        gap: var(--space-2xl);
      }

      .tags-sidebar {
        position: static;
        order: -1;
      }

      .stats-summary {
        padding: var(--space-lg);
      }

      .popular-tags {
        padding: var(--space-lg);
      }
    }
  </style>
</Base>