---
export const prerender = true;

import { getCollection } from 'astro:content';
import Base from '../layouts/Base.astro';
import PostCard from '../components/PostCard.astro';

const posts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get all unique tags for the tag cloud
const allTags = [...new Set(posts.flatMap(post => post.data.tags))];
---

<Base title="Rabbit Holes - Curiosity-Driven Discovery">
  <div class="container">
    <section class="bio text-center mb-3xl">
      <h1 class="text-4xl font-bold mb-lg">Hi, I'm Bhuvan</h1>
      <p class="text-lg text-secondary mb-2xl max-w-2xl mx-auto">Here are the things I find interesting. I hope you find your next rabbit hole to go tumbling down here.</p>
      <div class="flex gap-md justify-center">
        <button id="random-btn" class="btn flex items-center gap-xs" title="Random post (Cmd+R)">
          <span class="random-icon">üé≤</span>
          <span class="random-text">Surprise Me</span>
        </button>
        <a href="https://papertrails.rabbitholes.garden" class="btn flex items-center gap-xs" title="Curated website feeds">
          <span class="trails-icon">üóûÔ∏è</span>
          <span class="trails-text">Paper Trails</span>
        </a>
      </div>
    </section>

    <section class="posts mb-3xl">
      {sortedPosts.slice(0, 8).map((post) => (
        <PostCard post={post} showExcerpt={false} />
      ))}
    </section>

    <div class="load-more text-center mb-xl hidden" id="load-more-container">
      <button class="btn" id="load-more-btn">
        Load more posts
      </button>
    </div>
    
    <div class="loading-indicator flex items-center justify-center gap-md hidden" id="loading-indicator" aria-live="polite" aria-label="Loading status">
      <div class="spinner"></div>
      <span class="text-tertiary text-sm uppercase">Loading more posts...</span>
    </div>

    <section class="discovery">
      <div class="discovery-content max-w-4xl mx-auto">
        <div class="discovery-header text-center mb-3xl">
          <h2 class="text-xl font-medium text-secondary mb-md">Continue Exploring</h2>
        </div>
        
        <div class="discovery-sections">
          <div class="tags-section mb-3xl">
            <h3 class="section-label text-sm font-medium text-tertiary uppercase mb-lg">Topics</h3>
            <div class="tag-cloud">
              {allTags.slice(0, 12).map((tag) => (
                <a href={`/tags/${tag}`} class="tag-link">
                  {tag}
                </a>
              ))}
            </div>
          </div>

          <div class="recent-section">
            <h3 class="section-label text-sm font-medium text-tertiary uppercase mb-lg">Recent</h3>
            <div class="recent-posts">
              {sortedPosts.slice(0, 4).map((post) => (
                <a href={`/posts/${post.slug}`} class="recent-item group">
                  <div class="recent-meta">
                    <span class={`type-dot type-dot--${post.data.type}`}></span>
                    <time class="recent-date text-xs text-tertiary">{new Date(post.data.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</time>
                  </div>
                  <h4 class="recent-title text-sm text-secondary group-hover:text-accent transition-colors">{post.data.title}</h4>
                </a>
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>

  <style>
    .bio {
      padding: var(--space-2xl) 0 var(--space-3xl) 0;
    }
    
    .bio h1 {
      margin-bottom: var(--space-lg) !important;
    }
    
    .bio p {
      margin-bottom: var(--space-2xl) !important;
    }
    
    .bio button {
      margin-top: var(--space-md);
    }
    
    .post-type-indicator {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      flex-shrink: 0;
    }
    
    /* Ensure proper spacing between posts and other sections */
    .posts {
      margin-bottom: var(--space-3xl);
    }
    
    .discovery {
      margin-top: var(--space-4xl);
      padding-top: var(--space-3xl);
      border-top: 1px solid var(--color-border);
      opacity: 0.8;
    }
    
    .discovery-content {
      padding: 0 var(--space-lg);
    }
    
    .section-label {
      letter-spacing: 0.1em;
      font-weight: 600;
    }
    
    .tag-cloud {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-xs) var(--space-md);
      line-height: 1.6;
    }
    
    .tag-link {
      color: var(--color-text-tertiary);
      text-decoration: none;
      font-size: var(--text-sm);
      padding: var(--space-xs) 0;
      border-bottom: 1px solid transparent;
      transition: all 0.2s ease;
      display: inline-block;
    }
    
    .tag-link:hover {
      color: var(--color-accent);
      border-bottom-color: var(--color-accent);
    }
    
    .recent-posts {
      display: flex;
      flex-direction: column;
      gap: var(--space-lg);
    }
    
    .recent-item {
      text-decoration: none;
      display: block;
      padding: var(--space-sm) 0;
      border-bottom: 1px solid transparent;
      transition: all 0.2s ease;
    }
    
    .recent-item:hover {
      border-bottom-color: var(--color-border);
    }
    
    .recent-meta {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      margin-bottom: var(--space-xs);
    }
    
    .type-dot {
      width: 4px;
      height: 4px;
      border-radius: 50%;
      display: block;
    }
    
    .type-dot--taught-by-machine { background: var(--color-type-taught-by-machine); }
    .type-dot--quick-thoughts { background: var(--color-type-quick-thoughts); }
    .type-dot--link-dumps { background: var(--color-type-link-dumps); }
    .type-dot--deep-dives { background: var(--color-type-deep-dives); }
    .type-dot--thats-interesting { background: var(--color-type-thats-interesting); }
    .type-dot--practical { background: var(--color-type-practical); }
    .type-dot--reflections { background: var(--color-type-reflections); }
    .type-dot--data-stories { background: var(--color-type-data-stories); }
    .type-dot--news-commentary { background: var(--color-type-news-commentary); }
    .type-dot--videos { background: var(--color-type-videos); }
    .type-dot--music { background: var(--color-type-music); }
    .type-dot--photos { background: var(--color-type-photos); }
    
    .recent-title {
      line-height: var(--leading-normal);
      font-weight: 400;
    }
    
    /* Mobile responsive */
    @media (max-width: 768px) {
      .discovery-content {
        padding: 0 var(--space-md);
      }
      
      .tags-section {
        margin-bottom: var(--space-2xl) !important;
      }
    }
  </style>

  <script>
    // Enhanced load more functionality with infinite scroll
    const loadMoreBtn = document.getElementById('load-more-btn');
    const loadMoreContainer = document.getElementById('load-more-container');
    const loadingIndicator = document.getElementById('loading-indicator');
    const postsContainer = document.querySelector('.posts');
    
    let currentPage = 1;
    const postsPerPage = 10;
    let isLoading = false;
    let hasMorePosts = true;
    
    // Show load more button if there are more posts
    if (postsContainer && postsContainer.children.length >= postsPerPage) {
      loadMoreContainer.style.display = 'block';
    }
    
    // Intersection Observer for infinite scroll
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && hasMorePosts && !isLoading) {
          loadMorePosts();
        }
      });
    }, {
      rootMargin: '100px'
    });
    
    // Observe the load more button
    if (loadMoreBtn) {
      observer.observe(loadMoreBtn);
    }
    
    async function loadMorePosts() {
      if (isLoading || !hasMorePosts) return;
      
      isLoading = true;
      loadingIndicator.style.display = 'flex';
      loadMoreBtn.style.display = 'none';
      
      try {
        // Simulate loading more posts
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        currentPage++;
        
        // Simulate reaching end of posts
        if (currentPage >= 3) {
          hasMorePosts = false;
          loadMoreContainer.style.display = 'none';
          loadingIndicator.innerHTML = '<span>‚ú® You\'ve reached the end! Time to explore the archives.</span>';
          loadingIndicator.setAttribute('aria-label', 'All posts loaded');
          setTimeout(() => {
            loadingIndicator.style.display = 'none';
          }, 3000);
        } else {
          loadMoreBtn.style.display = 'block';
        }
        
      } catch (error) {
        console.error('Error loading more posts:', error);
        loadingIndicator.innerHTML = '<span>Failed to load more posts. Please try again.</span>';
        loadingIndicator.setAttribute('aria-label', 'Error loading posts');
        setTimeout(() => {
          loadingIndicator.style.display = 'none';
          loadMoreBtn.style.display = 'block';
        }, 3000);
      } finally {
        isLoading = false;
        loadingIndicator.style.display = 'none';
      }
    }
    
    // Manual load more button click
    loadMoreBtn?.addEventListener('click', loadMorePosts);
    
    // Random post functionality
    const randomBtn = document.getElementById('random-btn');
    const allPosts = [
      '/posts/2025-08-01-the-protection-racket-a-history-of-tariffs-and-who-really-pays',
      '/posts/2025-08-02-i-gots-links-for-you-issue-1',
      '/posts/2025-08-03-good-advice-from-rudyard-kilpling'
    ];
    
    function goToRandomPost() {
      const randomIndex = Math.floor(Math.random() * allPosts.length);
      const randomPost = allPosts[randomIndex];
      window.location.href = randomPost;
    }
    
    randomBtn?.addEventListener('click', goToRandomPost);
    
    // Keyboard shortcut for random post (Cmd+R or Ctrl+R)
    document.addEventListener('keydown', (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key === 'r' && !e.shiftKey) {
        e.preventDefault();
        goToRandomPost();
      }
    });
  </script>
</Base>
