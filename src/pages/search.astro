---
export const prerender = true;

import { getCollection } from 'astro:content';
import Base from '../layouts/Base.astro';

const posts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get all unique tags for suggestions
const allTags = [...new Set(posts.flatMap(post => post.data.tags))];

// Prepare search data for client-side
const searchIndex = posts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  content: post.body,
  type: post.data.type,
  tags: post.data.tags || [],
  date: post.data.date.toISOString(),
  url: `/posts/${post.slug}`,
  description: post.data.description || ''
}));
---

<Base title="Search - Bhuvan's Blog" description="Search through all blog posts and discover content">
  <div class="search-container">
    <div class="search-header">
      <h1>Search</h1>
      <p>Find exactly what you're looking for among {posts.length} posts</p>
    </div>

    <div class="search-box">
      <input 
        type="text" 
        id="searchInput"
        placeholder="Search posts, tags, or topics..."
        autocomplete="off"
      />
      <button id="searchButton">Search</button>
    </div>

    <div class="filters">
      <button class="filter-btn active" data-filter="all">All</button>
      <button class="filter-btn" data-filter="musing">Musings</button>
      <button class="filter-btn" data-filter="link">Links</button>
      <button class="filter-btn" data-filter="video">Videos</button>
      <button class="filter-btn" data-filter="music">Music</button>
    </div>

    <div id="searchStatus" class="search-status">
      Start typing to search...
    </div>

    <div id="searchResults" class="search-results"></div>

    <div id="suggestions" class="suggestions">
      <h2>Popular Tags</h2>
      <div class="tag-cloud">
        {allTags.slice(0, 20).map((tag) => (
          <button class="tag-btn" data-tag={tag}>#{tag}</button>
        ))}
      </div>
    </div>
  </div>

  <style>
    /* Aggressive link reset for search page */
    .search-container a,
    .search-container a:link,
    .search-container a:visited,
    .search-container a:active {
      color: var(--text-primary) !important;
      text-decoration: none !important;
    }
    
    .search-container a:hover {
      color: var(--accent) !important;
      text-decoration: none !important;
    }

    /* Ensure CSS custom properties are available */
    :root {
      --text-primary: #111111;
      --text-secondary: #666666;
      --text-tertiary: #999999;
      --accent: #fb923c;
      --accent-light: #fed7aa;
      --border: #e5e5e5;
      --bg: #ffffff;
      --hover: #f8fafc;
      
      /* Spacing scale */
      --space-xs: 0.25rem;
      --space-sm: 0.5rem;
      --space-md: 1rem;
      --space-lg: 1.5rem;
      --space-xl: 2rem;
      --space-2xl: 2.5rem;
      --space-3xl: 3rem;
      --space-4xl: 4rem;
      
      /* Typography */
      --text-xs: 0.75rem;
      --text-sm: 0.875rem;
      --text-base: 1rem;
      --text-lg: 1.125rem;
      --text-xl: 1.25rem;
      --text-2xl: 1.5rem;
      --text-3xl: 1.875rem;
      --text-4xl: 2.25rem;
      
      /* Layout */
      --width-content: 672px;
    }

    [data-theme="dark"] {
      --text-primary: #f8fafc;
      --text-secondary: #94a3b8;
      --text-tertiary: #64748b;
      --accent: #fb923c;
      --accent-light: #ea580c;
      --border: #1e293b;
      --bg: #0a0a0a;
      --hover: #0f172a;
    }

    /* Reset default link styles in search results */
    .search-results a,
    .search-results a:link,
    .search-results a:visited,
    .search-results a:active {
      color: var(--text-primary) !important;
      text-decoration: none !important;
    }
    
    .search-results a:hover {
      color: var(--accent) !important;
      text-decoration: none !important;
    }

    .search-container {
      max-width: var(--width-content);
      margin: 0 auto;
      padding: var(--space-4xl) var(--space-lg);
    }

    .search-header {
      text-align: center;
      margin-bottom: var(--space-3xl);
    }

    .search-header h1 {
      font-size: var(--text-4xl);
      font-weight: 700;
      margin-bottom: var(--space-md);
      color: var(--text-primary);
      letter-spacing: -0.025em;
    }

    .search-header p {
      color: var(--text-secondary);
      font-size: var(--text-xl);
      max-width: 500px;
      margin: 0 auto;
      line-height: 1.6;
    }

    .search-box {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
    }

    #searchInput {
      flex: 1;
      padding: 0.75rem 1rem;
      font-size: 1rem;
      border: 2px solid var(--border);
      border-radius: 8px;
      background: var(--bg);
      color: var(--text-primary);
      outline: none;
      transition: border-color 0.2s ease;
    }

    #searchInput:focus {
      border-color: var(--accent);
    }

    #searchButton {
      padding: 0.75rem 1.5rem;
      background: var(--accent);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    #searchButton:hover {
      background: var(--accent-light);
    }

    .filters {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
      flex-wrap: wrap;
    }

    .filter-btn {
      padding: 0.5rem 1rem;
      border: 1px solid var(--border);
      background: none;
      color: var(--text-secondary);
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
    }

    .filter-btn.active,
    .filter-btn:hover {
      color: var(--accent);
      border-color: var(--accent);
    }

    .search-status {
      text-align: center;
      color: var(--text-secondary);
      margin-bottom: 1.5rem;
      padding: 1rem;
      background: var(--hover);
      border-radius: 8px;
    }

    .search-results {
      display: none;
    }

    .search-results.show {
      display: block;
    }

    .search-result {
      margin-bottom: var(--space-3xl);
      padding-bottom: var(--space-3xl);
      border-bottom: 1px solid var(--border);
      transition: all 0.2s ease;
      position: relative;
    }

    .search-result:hover {
      padding-left: var(--space-md);
      border-left: 3px solid var(--accent);
    }

    .search-result:last-child {
      border-bottom: none;
      padding-bottom: 0;
      margin-bottom: 0;
    }

    .result-title {
      font-size: var(--text-2xl);
      font-weight: 700;
      margin-bottom: var(--space-md);
      line-height: 1.3;
      letter-spacing: -0.025em;
      color: var(--text-primary);
    }

    .result-title a,
    .result-title a:link,
    .result-title a:visited,
    .result-title a:active {
      color: var(--text-primary) !important;
      text-decoration: none !important;
      transition: color 0.2s ease;
      border: none;
      outline: none;
    }

    .result-title a:hover,
    .result-title a:visited:hover {
      color: var(--accent) !important;
      text-decoration: none !important;
    }

    .result-snippet {
      color: var(--text-secondary);
      line-height: 1.7;
      margin-bottom: var(--space-lg);
      font-size: var(--text-lg);
    }

    .result-meta {
      display: flex;
      align-items: center;
      gap: var(--space-md);
      font-size: var(--text-sm);
      color: var(--text-tertiary);
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-weight: 500;
    }

    .result-type {
      padding: var(--space-xs) var(--space-sm);
      background: var(--accent-light);
      color: var(--text-primary);
      border-radius: 12px;
      font-size: var(--text-xs);
      font-weight: 600;
    }

    .result-date {
      font-family: ui-monospace, 'SF Mono', 'Monaco', monospace;
    }

    .suggestions h2 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 1rem;
      color: var(--text-primary);
    }

    .tag-cloud {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .tag-btn {
      padding: 0.25rem 0.75rem;
      background: none;
      border: 1px solid var(--border);
      color: var(--text-tertiary);
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
    }

    .tag-btn:hover {
      color: var(--accent);
      border-color: var(--accent);
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .search-container {
        padding: 1rem;
      }
      
      .search-header h1 {
        font-size: 2rem;
      }
      
      .search-box {
        flex-direction: column;
      }
    }
  </style>

  <script define:vars={{ searchIndex }}>
    let currentFilter = 'all';
    let searchData = searchIndex;

    // DOM elements
    const searchInput = document.getElementById('searchInput');
    const searchButton = document.getElementById('searchButton');
    const searchStatus = document.getElementById('searchStatus');
    const searchResults = document.getElementById('searchResults');
    const suggestions = document.getElementById('suggestions');

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Search initialized with', searchData.length, 'posts');
      setupEventListeners();
      searchInput.focus();
    });

    function setupEventListeners() {
      // Search input
      searchInput.addEventListener('input', handleInput);
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          performSearch();
        }
      });

      // Search button
      searchButton.addEventListener('click', performSearch);

      // Filter buttons
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          currentFilter = this.dataset.filter;
          if (searchInput.value.trim()) {
            performSearch();
          }
        });
      });

      // Tag buttons
      document.querySelectorAll('.tag-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const tag = this.dataset.tag;
          searchInput.value = tag;
          performSearch();
        });
      });
    }

    function handleInput() {
      const query = searchInput.value.trim();
      if (query.length >= 3) {
        performSearch();
      } else if (query.length === 0) {
        showSuggestions();
      }
    }

    function performSearch() {
      const query = searchInput.value.trim();
      if (!query) return;

      console.log('Searching for:', query);
      
      const results = search(query, currentFilter);
      displayResults(results, query);
    }

    function search(query, filter) {
      const lowerQuery = query.toLowerCase();
      
      return searchData.filter(post => {
        // Filter by type
        if (filter !== 'all' && post.type !== filter) {
          return false;
        }
        
        // Search in title, content, description, and tags
        const searchText = [
          post.title,
          post.content,
          post.description,
          ...post.tags
        ].join(' ').toLowerCase();
        
        return searchText.includes(lowerQuery);
      }).map(post => ({
        title: post.title,
        url: post.url,
        snippet: generateSnippet(post, lowerQuery),
        type: post.type,
        date: new Date(post.date).toLocaleDateString()
      }));
    }

    function generateSnippet(post, query) {
      const content = post.content || post.description || '';
      const maxLength = 150;
      
      // Find query in content
      const queryIndex = content.toLowerCase().indexOf(query);
      
      if (queryIndex !== -1) {
        const start = Math.max(0, queryIndex - 50);
        const end = Math.min(content.length, queryIndex + 100);
        let snippet = content.slice(start, end);
        
        if (start > 0) snippet = '...' + snippet;
        if (end < content.length) snippet = snippet + '...';
        
        return snippet;
      }
      
      // Fallback to beginning
      return content.length > maxLength ? 
        content.slice(0, maxLength) + '...' : 
        content;
    }

    function displayResults(results, query) {
      console.log('Displaying', results.length, 'results');
      
      if (results.length === 0) {
        searchStatus.textContent = `No results found for "${query}". Try a different search term.`;
        searchResults.innerHTML = '';
        hideSuggestions();
        showResults();
        return;
      }

      searchStatus.textContent = `Found ${results.length} result${results.length !== 1 ? 's' : ''} for "${query}"`;

      searchResults.innerHTML = results.map(result => `
        <article class="search-result">
          <h3 class="result-title">
            <a href="${result.url}" style="color: #111111 !important; text-decoration: none !important;">${result.title}</a>
          </h3>
          <p class="result-snippet">${result.snippet}</p>
          <div class="result-meta">
            <span class="result-type">${result.type}</span>
            <span class="result-date">${result.date}</span>
          </div>
        </article>
      `).join('');

      hideSuggestions();
      showResults();
      
      // Force link styling after DOM update
      setTimeout(() => {
        const links = document.querySelectorAll('.search-results a');
        links.forEach(link => {
          link.style.color = '#111111';
          link.style.textDecoration = 'none';
          link.addEventListener('mouseenter', () => {
            link.style.color = '#fb923c';
          });
          link.addEventListener('mouseleave', () => {
            link.style.color = '#111111';
          });
        });
      }, 50);
    }

    function showResults() {
      searchResults.classList.add('show');
    }

    function showSuggestions() {
      searchResults.classList.remove('show');
      suggestions.style.display = 'block';
      searchStatus.textContent = 'Start typing to search...';
    }

    function hideSuggestions() {
      suggestions.style.display = 'none';
    }
  </script>
</Base>