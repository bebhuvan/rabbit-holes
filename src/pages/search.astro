---
export const prerender = true;

import { getCollection } from 'astro:content';
import Base from '../layouts/Base.astro';

const posts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get all unique tags for suggestions
const allTags = [...new Set(posts.flatMap(post => post.data.tags))];

// Prepare search data for client-side
const searchIndex = posts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  content: post.body,
  type: post.data.type,
  tags: post.data.tags || [],
  date: post.data.date.toISOString(),
  url: `/posts/${post.slug}`,
  description: post.data.description || ''
}));
---

<Base title="Search — Rabbit Holes" description="Search through all blog posts and discover content">
  <div class="search-container">
    <div class="page-header">
      <div class="page-label">Search</div>
      <h1>Find Your Rabbit Hole</h1>
      <p class="page-description">Search through {posts.length} posts by title, content, or tags.</p>
    </div>

    <div class="search-box">
      <div class="search-input-wrapper">
        <input
          type="text"
          id="search-input"
          class="search-input"
          placeholder="Search archives..."
          autocomplete="off"
        />
        <span class="search-icon">⌘</span>
      </div>
    </div>

    <div class="filter-tabs">
      <button class="filter-tab active" data-filter="all">All</button>
      <button class="filter-tab" data-filter="taught-by-machine">Essays</button>
      <button class="filter-tab" data-filter="link-dumps">Links</button>
      <button class="filter-tab" data-filter="quick-thoughts">Notes</button>
    </div>

    <div id="search-status" class="search-status"></div>

    <div id="search-results" class="search-results"></div>

    <div id="search-suggestions" class="search-suggestions">
      <h2 class="suggestions-title">Popular Tags</h2>
      <div class="tag-cloud">
        {allTags.slice(0, 20).map((tag) => (
          <button class="tag-btn" data-tag={tag}>#{tag}</button>
        ))}
      </div>
    </div>
  </div>

  <style>
    .search-container {
      max-width: var(--width-content);
      margin: 0 auto;
      padding: 80px 40px 120px;
    }

    .page-header {
      margin-bottom: 60px;
    }

    .page-label {
      font-family: 'Outfit', sans-serif;
      font-size: 11px;
      font-weight: 600;
      letter-spacing: 0.15em;
      text-transform: uppercase;
      color: var(--color-text-light);
      margin-bottom: 24px;
    }

    h1 {
      font-family: 'Outfit', sans-serif;
      font-size: 52px;
      font-weight: 700;
      line-height: 1.1;
      letter-spacing: -0.025em;
      margin-bottom: 24px;
      color: var(--color-text-primary);
    }

    .page-description {
      font-size: 21px;
      line-height: 1.6;
      color: var(--color-text-tertiary);
      max-width: 540px;
    }

    .search-box {
      margin-bottom: 60px;
      padding-bottom: 60px;
      border-bottom: 1px solid #e8e8e8;
    }

    .search-input-wrapper {
      position: relative;
    }

    .search-input {
      width: 100%;
      font-family: 'Crimson Pro', Georgia, serif;
      font-size: 18px;
      padding: 16px 48px 16px 20px;
      border: 1px solid #d0d0d0;
      background: var(--color-bg);
      color: var(--color-text-secondary);
      outline: none;
    }

    .search-input:focus {
      border-color: var(--color-accent);
    }

    .search-input::placeholder {
      color: var(--color-text-light);
    }

    .search-icon {
      position: absolute;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--color-text-light);
      font-size: 18px;
    }

    .filter-tabs {
      display: flex;
      gap: 12px;
      margin-bottom: 60px;
      flex-wrap: wrap;
    }

    .filter-tab {
      font-family: 'Outfit', sans-serif;
      font-size: 13px;
      font-weight: 500;
      letter-spacing: 0.05em;
      padding: 10px 20px;
      border: 1px solid #d0d0d0;
      background: transparent;
      color: var(--color-text-secondary);
      cursor: pointer;
      text-transform: uppercase;
      transition: all 0.2s ease;
    }

    .filter-tab.active {
      background: var(--color-text-secondary);
      color: var(--color-bg);
      border-color: var(--color-text-secondary);
    }

    .filter-tab:hover {
      background: var(--color-accent);
      color: var(--color-bg);
      border-color: var(--color-accent);
    }

    .search-status {
      font-family: 'Outfit', sans-serif;
      font-size: 13px;
      font-weight: 500;
      color: var(--color-text-light);
      margin-bottom: 48px;
      padding: 12px 0;
      border-top: 1px solid #f0f0f0;
      border-bottom: 1px solid #f0f0f0;
    }

    .search-status:empty {
      display: none;
    }

    .search-results {
      margin-bottom: 80px;
    }

    /* Apply global post card styles to search results - using :global for dynamic content */
    :global(.search-result) {
      margin-bottom: 80px;
      padding-bottom: 80px;
      border-bottom: 1px solid #eeeeee;
    }

    :global(.search-result:last-child) {
      border-bottom: none;
    }

    /* Use post-meta-line styling for date and type */
    :global(.search-result-meta) {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 20px;
    }

    :global(.search-result-date) {
      font-family: 'Outfit', sans-serif;
      font-size: 11px;
      color: var(--color-accent);
      letter-spacing: 0.15em;
      font-weight: 600;
      text-transform: uppercase;
    }

    :global(.search-result-type) {
      font-family: 'Outfit', sans-serif;
      font-size: 10px;
      color: var(--color-text-light);
      letter-spacing: 0.1em;
      font-weight: 500;
      text-transform: uppercase;
      position: relative;
      padding-left: 12px;
    }

    :global(.search-result-type::before) {
      content: '·';
      position: absolute;
      left: 0;
      color: var(--color-text-light);
      font-weight: 400;
    }

    /* Use post-title styling */
    :global(.search-result-title) {
      font-family: 'Outfit', sans-serif;
      font-size: 36px;
      font-weight: 600;
      line-height: 1.15;
      letter-spacing: -0.015em;
      margin-bottom: 18px;
      color: var(--color-text-primary);
    }

    :global(.search-result-title a) {
      color: var(--color-text-primary);
      text-decoration: none;
      transition: color 0.2s ease;
    }

    :global(.search-result-title a:hover) {
      color: var(--color-accent);
    }

    /* Use excerpt styling */
    :global(.search-result-snippet) {
      font-size: 20px;
      line-height: 1.75;
      color: var(--color-text-secondary);
      font-weight: 400;
    }

    .search-suggestions {
      margin-top: 60px;
    }

    .suggestions-title {
      font-family: 'Outfit', sans-serif;
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 24px;
      color: var(--color-text-primary);
    }

    .tag-cloud {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
    }

    .tag-btn {
      font-family: 'Outfit', sans-serif;
      font-size: 13px;
      font-weight: 500;
      padding: 8px 16px;
      border: 1px solid #d0d0d0;
      background: transparent;
      color: var(--color-text-secondary);
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .tag-btn:hover {
      background: var(--color-accent);
      color: var(--color-bg);
      border-color: var(--color-accent);
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .search-container {
        padding: 60px 24px 80px;
      }

      h1 {
        font-size: 36px;
      }

      .page-header {
        margin-bottom: 48px;
      }

      .search-box {
        margin-bottom: 48px;
        padding-bottom: 48px;
      }

      .filter-tabs {
        margin-bottom: 48px;
      }

      :global(.search-result) {
        margin-bottom: 50px;
        padding-bottom: 50px;
      }

      :global(.search-result-title) {
        font-size: 28px;
      }

      :global(.search-result-snippet) {
        font-size: 18px;
      }
    }
  </style>

  <script type="module" define:vars={{ searchIndex }}>
    console.log('Search index loaded:', searchIndex.length, 'posts');

    let currentFilter = 'all';

    // Search input event listeners
    const searchInput = document.getElementById('search-input');

    if (searchInput) {
      searchInput.addEventListener('input', function() {
        const query = this.value.trim();
        if (query.length >= 2) {
          performSearch(query);
        } else if (query.length === 0) {
          clearResults();
        }
      });

      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          const query = this.value.trim();
          if (query.length >= 2) {
            performSearch(query);
          }
        }
      });
    }

    // Filter functionality
    document.querySelectorAll('.filter-tab').forEach(btn => {
      btn.addEventListener('click', function() {
        // Update active state
        document.querySelectorAll('.filter-tab').forEach(b => {
          b.classList.remove('active');
        });
        this.classList.add('active');

        currentFilter = this.dataset.filter;

        // Re-run search if there's a query
        if (searchInput && searchInput.value.trim()) {
          performSearch(searchInput.value.trim());
        }
      });
    });

    // Tag button functionality
    document.querySelectorAll('.tag-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const tag = this.dataset.tag;
        if (searchInput) {
          searchInput.value = tag;
          searchInput.focus();
          performSearch(tag);
        }
      });
    });

    function performSearch(query) {
      console.log('Performing search for:', query);
      if (!query.trim()) return;

      const results = searchPosts(query, currentFilter);
      console.log('Search results:', results.length);
      displayResults(results, query);
    }

    function clearResults() {
      const resultsContainer = document.getElementById('search-results');
      const statusContainer = document.getElementById('search-status');
      const suggestionsContainer = document.getElementById('search-suggestions');

      resultsContainer.innerHTML = '';
      statusContainer.textContent = '';
      suggestionsContainer.style.display = 'block';
    }

    function searchPosts(query, filter) {
      const lowerQuery = query.toLowerCase();

      return searchIndex.filter(post => {
        // Filter by type
        if (filter !== 'all' && post.type !== filter) {
          return false;
        }

        // Search in title, content, description, and tags
        const searchText = [
          post.title,
          post.content,
          post.description,
          ...post.tags
        ].join(' ').toLowerCase();

        return searchText.includes(lowerQuery);
      });
    }

    function displayResults(results, query) {
      const resultsContainer = document.getElementById('search-results');
      const statusContainer = document.getElementById('search-status');
      const suggestionsContainer = document.getElementById('search-suggestions');

      if (!resultsContainer || !statusContainer) return;

      if (results.length === 0) {
        statusContainer.textContent = `No results found for "${query}"`;
        resultsContainer.innerHTML = '';
        suggestionsContainer.style.display = 'none';
        return;
      }

      const filterText = currentFilter === 'all' ? '' : ` in ${currentFilter.replace(/-/g, ' ')}`;
      statusContainer.textContent = `${results.length} result${results.length !== 1 ? 's' : ''} for "${query}"${filterText}`;

      resultsContainer.innerHTML = results.map(post => `
        <article class="search-result">
          <div class="search-result-meta">
            <div class="search-result-date">${new Date(post.date).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</div>
            <div class="search-result-type">${post.type.replace(/-/g, ' ')}</div>
          </div>
          <h2 class="search-result-title">
            <a href="${post.url}">${post.title}</a>
          </h2>
          <div class="search-result-snippet">${generateSnippet(post, query)}</div>
        </article>
      `).join('');

      suggestionsContainer.style.display = 'none';
    }

    function generateSnippet(post, query) {
      const content = post.content || post.description || '';
      const maxLength = 150;
      const lowerQuery = query.toLowerCase();

      const queryIndex = content.toLowerCase().indexOf(lowerQuery);

      if (queryIndex !== -1) {
        const start = Math.max(0, queryIndex - 50);
        const end = Math.min(content.length, queryIndex + 100);
        let snippet = content.slice(start, end);

        if (start > 0) snippet = '...' + snippet;
        if (end < content.length) snippet = snippet + '...';

        return snippet;
      }

      return content.length > maxLength ?
        content.slice(0, maxLength) + '...' :
        content;
    }
  </script>
</Base>