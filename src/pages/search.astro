---
export const prerender = true;

import { getCollection } from 'astro:content';
import Base from '../layouts/Base.astro';

const posts = await getCollection('posts', ({ data }) => {
  return data.published !== false;
});

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Get all unique tags for suggestions
const allTags = [...new Set(posts.flatMap(post => post.data.tags))];

// Prepare search data for client-side
const searchIndex = posts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  content: post.body,
  type: post.data.type,
  tags: post.data.tags || [],
  date: post.data.date.toISOString(),
  url: `/posts/${post.slug}`,
  description: post.data.description || ''
}));
---

<Base title="Search - Bhuvan's Blog" description="Search through all blog posts and discover content">
  <div class="container search-page">
    <div class="search-header text-center mb-2xl">
      <h1 class="text-4xl font-bold mb-md">Search</h1>
      <p class="text-xl text-secondary">Find exactly what you're looking for among {posts.length} posts</p>
    </div>

    <div class="search-form mb-xl">
      <div class="search-box flex gap-sm mb-lg">
        <input 
          type="text" 
          id="search-input"
          class="form-input flex-1"
          placeholder="Search posts, tags, or topics..."
          autocomplete="off"
        />
        <button id="search-button" class="btn btn-primary">Search</button>
      </div>

      <div class="search-filters flex gap-sm flex-wrap">
        <button class="filter-btn btn btn-active" data-filter="all">All</button>
        <button class="filter-btn btn" data-filter="taught-by-machine">🤖 Taught by machine</button>
        <button class="filter-btn btn" data-filter="quick-thoughts">💭 Quick thoughts</button>
        <button class="filter-btn btn" data-filter="link-dumps">🔍 Link dumps</button>
        <button class="filter-btn btn" data-filter="deep-dives">📚 Deep dives</button>
        <button class="filter-btn btn" data-filter="thats-interesting">🌟 That's interesting</button>
        <button class="filter-btn btn" data-filter="practical">🎯 Practical</button>
        <button class="filter-btn btn" data-filter="reflections">🧠 Reflections</button>
        <button class="filter-btn btn" data-filter="data-stories">📈 Data stories</button>
        <button class="filter-btn btn" data-filter="news-commentary">🗞️ News & commentary</button>
        <button class="filter-btn btn" data-filter="videos">📹 Videos</button>
        <button class="filter-btn btn" data-filter="music">🎵 Music</button>
        <button class="filter-btn btn" data-filter="photos">📸 Photos</button>
      </div>
    </div>

    <div id="search-status" class="search-status text-center p-lg bg-surface rounded mb-lg">
      Start typing to search...
    </div>

    <div id="search-results" class="search-results hidden"></div>

    <div id="search-suggestions" class="search-suggestions">
      <h2 class="text-xl font-semibold mb-lg">Popular Tags</h2>
      <div class="tag-cloud flex flex-wrap gap-sm">
        {allTags.slice(0, 20).map((tag) => (
          <button class="tag-btn btn" data-tag={tag}>#{tag}</button>
        ))}
      </div>
    </div>
  </div>

  <style>
    .search-page {
      padding: var(--space-2xl) 0;
    }
    
    .search-form {
      max-width: 600px;
      margin: 0 auto;
    }
    
    .filter-btn.btn-active {
      background: var(--color-accent);
      color: white;
      border-color: var(--color-accent);
    }
    
    .search-results {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .search-result {
      margin-bottom: var(--space-2xl);
      padding-bottom: var(--space-lg);
      border-bottom: 1px solid var(--color-border);
      transition: all 0.2s ease;
    }
    
    .search-result:hover {
      padding-left: var(--space-sm);
      border-left: 3px solid var(--color-accent);
    }
    
    .search-result:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }
    
    .search-result-title {
      font-size: var(--text-2xl);
      font-weight: 600;
      margin-bottom: var(--space-sm);
      line-height: var(--leading-tight);
    }
    
    .search-result-title a {
      color: var(--color-text-primary);
      text-decoration: none;
      transition: color 0.2s ease;
    }
    
    .search-result-title a:hover {
      color: var(--color-accent);
    }
    
    .search-result-snippet {
      color: var(--color-text-secondary);
      line-height: var(--leading-relaxed);
      margin-bottom: var(--space-md);
      font-size: var(--text-lg);
    }
    
    .search-result-meta {
      display: flex;
      align-items: center;
      gap: var(--space-md);
      font-size: var(--text-sm);
      color: var(--color-text-tertiary);
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-weight: 500;
    }
    
    .search-result-type {
      padding: var(--space-xs) var(--space-sm);
      background: var(--color-surface);
      border-radius: var(--radius-full);
      font-size: var(--text-xs);
      font-weight: 600;
    }
    
    .search-result-date {
      font-family: ui-monospace, 'SF Mono', 'Monaco', monospace;
    }
    
    .search-suggestions {
      max-width: 600px;
      margin: 0 auto;
    }
    
    .tag-btn:hover {
      background: var(--color-accent);
      color: white;
      border-color: var(--color-accent);
    }
    
    /* Mobile responsive */
    @media (max-width: 768px) {
      .search-page {
        padding: var(--space-xl) 0;
      }
      
      .search-box {
        flex-direction: column;
      }
      
      .search-filters {
        justify-content: center;
      }
      
      .search-result-title {
        font-size: var(--text-xl);
      }
      
      .search-result-snippet {
        font-size: var(--text-base);
      }
    }
  </style>

  <script type="module" define:vars={{ searchIndex }}>
    // Debug: Check if searchIndex has data
    console.log('Search index loaded:', searchIndex.length, 'posts');
    
    let currentFilter = 'all';
    
    // Search input event listeners
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-button');
    
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        const query = this.value.trim();
        if (query.length >= 3) {
          performSearch(query);
        } else if (query.length === 0) {
          clearResults();
        }
      });
      
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          performSearch(this.value.trim());
        }
      });
    }
    
    if (searchButton) {
      searchButton.addEventListener('click', function() {
        if (searchInput) {
          performSearch(searchInput.value.trim());
        }
      });
    }
    
    // Filter functionality
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        // Update active state
        document.querySelectorAll('.filter-btn').forEach(b => {
          b.classList.remove('btn-active');
          b.classList.add('btn');
        });
        this.classList.add('btn-active');
        this.classList.remove('btn');
        
        currentFilter = this.dataset.filter;
        
        // Re-run search if there's a query
        const searchInput = document.getElementById('search-input');
        if (searchInput && searchInput.value.trim()) {
          performSearch(searchInput.value.trim());
        }
      });
    });
    
    // Tag button functionality
    document.querySelectorAll('.tag-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        const tag = this.dataset.tag;
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
          searchInput.value = tag;
          performSearch(tag);
        }
      });
    });
    
    function performSearch(query) {
      console.log('Performing search for:', query);
      if (!query.trim()) return;
      
      const results = searchPosts(query, currentFilter);
      console.log('Search results:', results.length);
      displayResults(results, query);
    }
    
    function clearResults() {
      document.getElementById('search-results').classList.add('hidden');
      document.getElementById('search-suggestions').style.display = 'block';
      document.getElementById('search-status').textContent = 'Start typing to search...';
    }
    
    function searchPosts(query, filter) {
      const lowerQuery = query.toLowerCase();
      
      return searchIndex.filter(post => {
        // Filter by type
        if (filter !== 'all' && post.type !== filter) {
          return false;
        }
        
        // Search in title, content, description, and tags
        const searchText = [
          post.title,
          post.content,
          post.description,
          ...post.tags
        ].join(' ').toLowerCase();
        
        return searchText.includes(lowerQuery);
      });
    }
    
    function displayResults(results, query) {
      const resultsContainer = document.getElementById('search-results');
      const statusContainer = document.getElementById('search-status');
      const suggestionsContainer = document.getElementById('search-suggestions');
      
      if (!resultsContainer || !statusContainer) return;
      
      if (results.length === 0) {
        statusContainer.textContent = `No results found for "${query}". Try a different search term.`;
        resultsContainer.innerHTML = '';
        resultsContainer.classList.add('hidden');
        suggestionsContainer.style.display = 'none';
        return;
      }
      
      statusContainer.textContent = `Found ${results.length} result${results.length !== 1 ? 's' : ''} for "${query}"`;
      
      resultsContainer.innerHTML = results.map(post => `
        <article class="search-result">
          <h3 class="search-result-title">
            <a href="/posts/${post.slug}">${post.title}</a>	
          </h3>
          <p class="search-result-snippet">${generateSnippet(post, query)}</p>
          <div class="search-result-meta">
            <span class="post-type-indicator post-type-indicator--${post.type}"></span>
            <span class="search-result-type">${post.type}</span>
            <span class="search-result-date">${new Date(post.date).toLocaleDateString()}</span>
          </div>
        </article>
      `).join('');
      
      resultsContainer.classList.remove('hidden');
      suggestionsContainer.style.display = 'none';
    }
    
    function generateSnippet(post, query) {
      const content = post.content || post.description || '';
      const maxLength = 150;
      const lowerQuery = query.toLowerCase();
      
      const queryIndex = content.toLowerCase().indexOf(lowerQuery);
      
      if (queryIndex !== -1) {
        const start = Math.max(0, queryIndex - 50);
        const end = Math.min(content.length, queryIndex + 100);
        let snippet = content.slice(start, end);
        
        if (start > 0) snippet = '...' + snippet;
        if (end < content.length) snippet = snippet + '...';
        
        return snippet;
      }
      
      return content.length > maxLength ? 
        content.slice(0, maxLength) + '...' : 
        content;
    }
  </script>
</Base>