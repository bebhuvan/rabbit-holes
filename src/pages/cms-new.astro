---
// New tabbed CMS design
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Content Studio - Rabbit Holes</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  
  <style>
    /* Modern CSS Variables */
    :root {
      --bg-primary: #ffffff;
      --bg-secondary: #f8fafc;
      --bg-tertiary: #f1f5f9;
      --text-primary: #0f172a;
      --text-secondary: #475569;
      --text-tertiary: #94a3b8;
      --accent: #fb923c;
      --accent-hover: #ea580c;
      --accent-light: #fed7aa;
      --border: #e2e8f0;
      --border-hover: #cbd5e1;
      --success: #059669;
      --success-bg: #d1fae5;
      --error: #dc2626;
      --error-bg: #fee2e2;
      --warning: #d97706;
      --warning-bg: #fef3c7;
      --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
      --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
      --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      --radius-sm: 0.375rem;
      --radius-md: 0.5rem;
      --radius-lg: 0.75rem;
      --radius-xl: 1rem;
    }

    [data-theme="dark"] {
      --bg-primary: #0f172a;
      --bg-secondary: #1e293b;
      --bg-tertiary: #334155;
      --text-primary: #f8fafc;
      --text-secondary: #cbd5e1;
      --text-tertiary: #64748b;
      --border: #334155;
      --border-hover: #475569;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
      background: var(--bg-secondary);
      color: var(--text-primary);
      line-height: 1.6;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
    }

    .header {
      text-align: center;
      margin-bottom: 2rem;
    }

    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
    }

    .header p {
      color: var(--text-secondary);
      font-size: 1.125rem;
    }

    /* Tab Navigation */
    .tab-nav {
      display: flex;
      background: var(--bg-primary);
      border-radius: var(--radius-lg);
      padding: 0.25rem;
      margin-bottom: 2rem;
      box-shadow: var(--shadow-sm);
      overflow-x: auto;
    }

    .tab-btn {
      flex: 1;
      padding: 0.75rem 1rem;
      background: none;
      border: none;
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
      min-width: 120px;
    }

    .tab-btn:hover {
      color: var(--text-primary);
      background: var(--bg-secondary);
    }

    .tab-btn.active {
      background: var(--accent);
      color: white;
    }

    /* Tab Content */
    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    .cms-layout {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
      align-items: start;
    }

    @media (max-width: 768px) {
      .cms-layout {
        grid-template-columns: 1fr;
      }
    }

    .card {
      background: var(--bg-primary);
      border-radius: var(--radius-xl);
      padding: 2rem;
      box-shadow: var(--shadow-md);
      border: 1px solid var(--border);
    }

    .card h2 {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 1.5rem;
      color: var(--text-primary);
    }

    /* Form Elements */
    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-label {
      display: block;
      font-weight: 600;
      color: var(--text-primary);
      margin-bottom: 0.5rem;
      font-size: 0.875rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .form-input, .form-textarea, .form-select {
      width: 100%;
      padding: 0.75rem 1rem;
      border: 2px solid var(--border);
      border-radius: var(--radius-md);
      background: var(--bg-primary);
      color: var(--text-primary);
      font-size: 1rem;
      font-family: inherit;
      transition: all 0.2s ease;
      resize: vertical;
    }

    .form-input:focus, .form-textarea:focus, .form-select:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 3px var(--accent-light);
    }

    .form-textarea {
      min-height: 120px;
      line-height: 1.6;
    }

    .form-textarea.large {
      min-height: 200px;
    }

    /* Buttons */
    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: var(--bg-tertiary);
      border: 2px solid var(--border);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      font-size: 0.875rem;
      font-weight: 600;
      text-decoration: none;
      cursor: pointer;
      transition: all 0.2s ease;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-family: inherit;
    }

    .btn:hover {
      background: var(--accent-light);
      border-color: var(--accent);
      color: var(--accent-hover);
      transform: translateY(-1px);
    }

    .btn-primary {
      background: var(--accent);
      border-color: var(--accent);
      color: white;
    }

    .btn-primary:hover {
      background: var(--accent-hover);
      border-color: var(--accent-hover);
      color: white;
    }

    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }

    .btn-group {
      display: flex;
      gap: 0.75rem;
      flex-wrap: wrap;
    }

    .btn-full {
      width: 100%;
      justify-content: center;
    }

    /* Title Input Group */
    .title-input-group {
      display: flex;
      gap: 0.5rem;
      align-items: stretch;
    }

    .title-input-group .form-input {
      flex: 1;
    }

    .btn-title-generate {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0.75rem;
      background: var(--bg-tertiary);
      border: 2px solid var(--border);
      border-radius: var(--radius-md);
      color: var(--text-secondary);
      cursor: pointer;
      transition: all 0.2s ease;
      min-width: 44px;
    }

    .btn-title-generate:hover {
      background: var(--accent-light);
      border-color: var(--accent);
      color: var(--accent-hover);
    }

    /* File Upload */
    .file-upload {
      border: 2px dashed var(--border);
      border-radius: var(--radius-lg);
      padding: 2rem;
      text-align: center;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .file-upload:hover, .file-upload.dragover {
      border-color: var(--accent);
      background: var(--accent-light);
    }

    .file-upload input {
      display: none;
    }

    .file-upload-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
    }

    .file-upload-icon {
      width: 48px;
      height: 48px;
      color: var(--text-tertiary);
    }

    /* Model Selection */
    .model-selection {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .model-option {
      display: flex !important;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem;
      background: var(--bg-secondary, #f8f9fa);
      border: 2px solid var(--border, #e2e8f0);
      border-radius: var(--radius-lg, 8px);
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
      min-height: 80px;
      visibility: visible !important;
      opacity: 1 !important;
    }

    .model-option:hover {
      border-color: var(--accent-light);
      background: var(--bg-tertiary);
      transform: translateY(-1px);
    }

    .model-option.active {
      border-color: var(--accent, #fb923c);
      background: var(--accent-light, #fed7aa);
      box-shadow: 0 0 0 3px rgba(251, 146, 60, 0.1);
    }

    .model-icon {
      font-size: 1.5rem;
      flex-shrink: 0;
    }

    .model-info {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
      flex: 1;
    }

    .model-name {
      font-weight: 600;
      color: var(--text-primary);
      font-size: 0.875rem;
    }

    .model-desc {
      font-size: 0.75rem;
      color: var(--text-secondary);
    }

    /* Tags */
    .tag-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 0.75rem;
    }

    .tag {
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
      padding: 0.25rem 0.75rem;
      background: var(--accent-light);
      color: var(--accent-hover);
      border-radius: var(--radius-sm);
      font-size: 0.875rem;
      font-weight: 500;
    }

    .tag-remove {
      background: none;
      border: none;
      color: inherit;
      cursor: pointer;
      padding: 0;
      font-size: 1rem;
      line-height: 1;
    }

    /* Status Messages */
    .status-message {
      display: none;
      padding: 1rem 1.5rem;
      border-radius: var(--radius-md);
      margin-bottom: 1.5rem;
      font-weight: 500;
    }

    .status-message.success {
      background: var(--success-bg);
      color: var(--success);
      border: 1px solid var(--success);
    }

    .status-message.error {
      background: var(--error-bg);
      color: var(--error);
      border: 1px solid var(--error);
    }

    /* Follow-on Section */
    .follow-on-section {
      margin-top: 1.5rem;
      padding-top: 1.5rem;
      border-top: 2px solid var(--border);
      animation: slideDown 0.3s ease;
    }

    @keyframes slideDown {
      from { 
        opacity: 0; 
        transform: translateY(-10px); 
      }
      to { 
        opacity: 1; 
        transform: translateY(0); 
      }
    }

    /* Preview */
    .preview-area {
      min-height: 200px;
      max-height: 500px;
      overflow-y: auto;
      padding: 1.5rem;
      background: var(--bg-secondary);
      border-radius: var(--radius-md);
      border: 1px solid var(--border);
    }

    .preview-placeholder {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 200px;
      color: var(--text-tertiary);
      text-align: center;
    }

    .preview-placeholder svg {
      width: 48px;
      height: 48px;
      margin-bottom: 1rem;
    }

    /* Loading States */
    .spinner {
      width: 1rem;
      height: 1rem;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Utility Classes */
    .hidden { display: none !important; }
    .text-sm { font-size: 0.875rem; }
    .font-medium { font-weight: 500; }
    .mb-0 { margin-bottom: 0; }
    .mt-4 { margin-top: 1rem; }
  </style>
</head>

<body>
  <div class="container">
    <!-- Header -->
    <div class="header">
      <h1>🎨 Content Studio</h1>
      <p>Create beautiful posts with AI assistance</p>
    </div>

    <!-- Status Messages -->
    <div id="status-message" class="status-message"></div>

    <!-- Tab Navigation -->
    <div class="tab-nav">
      <button class="tab-btn active" data-tab="freeform">📝 Freeform</button>
      <button class="tab-btn" data-tab="single-link">🔗 Single Link</button>
      <button class="tab-btn" data-tab="link-roundup">📑 Link Roundup</button>
      <button class="tab-btn" data-tab="file-upload">📄 Upload File</button>
    </div>

    <!-- Tab 1: Freeform -->
    <div id="tab-freeform" class="tab-content active">
      <div class="cms-layout">
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
              <polyline points="14,2 14,8 20,8"/>
              <line x1="16" y1="13" x2="8" y2="13"/>
              <line x1="16" y1="17" x2="8" y2="17"/>
              <polyline points="10,9 9,9 8,9"/>
            </svg>
            Write Freely
          </h2>

          <!-- Title -->
          <div class="form-group">
            <label for="freeform-title" class="form-label">Title</label>
            <div class="title-input-group">
              <input type="text" id="freeform-title" class="form-input" placeholder="Enter title or let AI generate one...">
              <button type="button" id="freeform-generate-title-btn" class="btn-title-generate" title="Generate title with AI">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
            </div>
          </div>

          <!-- Content -->
          <div class="form-group">
            <label for="freeform-content" class="form-label">Content / Prompt</label>
            <textarea id="freeform-content" class="form-textarea large" 
              placeholder="Write your thoughts, share a discovery, or enter a prompt for AI to expand on...

Examples:
• Share something interesting you learned
• Describe a fascinating pattern you noticed  
• Ask AI to explore a topic you're curious about
• Write about connections between different ideas"></textarea>
          </div>

          <!-- Tags -->
          <div class="form-group">
            <label for="freeform-tags" class="form-label">Tags</label>
            <div class="tag-input-container">
              <div class="tag-list" id="freeform-tag-list"></div>
              <input type="text" id="freeform-tag-input" class="form-input" placeholder="Add tags (press Enter)">
            </div>
          </div>

          <!-- AI Model Selection -->
          <div class="form-group">
            <label class="form-label">AI Model</label>
            <div class="model-selection">
              <div class="model-option active" data-model="claude">
                <span class="model-icon">🧠</span>
                <div class="model-info">
                  <span class="model-name">Claude 3.5 Sonnet</span>
                  <span class="model-desc">Advanced reasoning & analysis</span>
                </div>
              </div>
              <div class="model-option" data-model="chatgpt">
                <span class="model-icon">⚡</span>
                <div class="model-info">
                  <span class="model-name">GPT-4o Mini</span>
                  <span class="model-desc">Fast, cost-effective generation</span>
                </div>
              </div>
            </div>
          </div>

          <!-- AI Actions -->
          <div class="btn-group">
            <button id="freeform-enhance-btn" class="btn btn-primary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Enhance with AI
            </button>
            <button id="freeform-test-btn" class="btn">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 12l2 2 4-4"/>
                <path d="M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z"/>
              </svg>
              Test API
            </button>
            <button id="freeform-clear-btn" class="btn">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6h18"/>
                <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
              </svg>
              Clear All
            </button>
          </div>

          <!-- Follow-on Prompting -->
          <div class="follow-on-section hidden" id="freeform-follow-on-section">
            <div class="form-group mb-0">
              <label for="freeform-follow-on-prompt" class="form-label">Follow-on Instructions</label>
              <textarea id="freeform-follow-on-prompt" class="form-textarea" rows="3"
                placeholder="Not happy with the result? Tell AI how to improve it...

Examples:
• Make it more casual and conversational
• Add more specific examples
• Make it shorter and punchier
• Focus on practical applications"></textarea>
              <div class="btn-group mt-4">
                <button id="freeform-apply-followon-btn" class="btn btn-primary">Apply Changes</button>
                <button id="freeform-clear-followon-btn" class="btn">Clear</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Preview Section -->
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
              <circle cx="12" cy="12" r="3"/>
            </svg>
            Preview
          </h2>

          <div class="preview-area" id="freeform-preview-area">
            <div class="preview-placeholder">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
              <p class="font-medium">Preview will appear here</p>
              <p class="text-sm">Start typing or enhance with AI to see your content</p>
            </div>
          </div>

          <div class="btn-group mt-4">
            <button id="freeform-publish-btn" class="btn btn-primary btn-full" disabled>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 11-7.778 7.778 5.5 5.5 0 017.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"/>
              </svg>
              Publish to Blog
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab 2: Single Link -->
    <div id="tab-single-link" class="tab-content">
      <div class="cms-layout">
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
              <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
            </svg>
            Single Link Analysis
          </h2>

          <!-- URL -->
          <div class="form-group">
            <label for="single-url" class="form-label">URL</label>
            <input type="url" id="single-url" class="form-input" placeholder="https://example.com">
          </div>

          <!-- Title -->
          <div class="form-group">
            <label for="single-title" class="form-label">Title</label>
            <div class="title-input-group">
              <input type="text" id="single-title" class="form-input" placeholder="Auto-generated from link...">
              <button type="button" id="single-generate-title-btn" class="btn-title-generate" title="Generate title with AI">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
            </div>
          </div>

          <!-- Optional Context -->
          <div class="form-group">
            <label for="single-context" class="form-label">Your Thoughts (Optional)</label>
            <textarea id="single-context" class="form-textarea" 
              placeholder="Add your perspective, context, or why this link caught your attention..."></textarea>
          </div>

          <!-- Tags -->
          <div class="form-group">
            <label for="single-tags" class="form-label">Tags</label>
            <div class="tag-input-container">
              <div class="tag-list" id="single-tag-list"></div>
              <input type="text" id="single-tag-input" class="form-input" placeholder="Add tags (press Enter)">
            </div>
          </div>

          <!-- AI Actions -->
          <div class="btn-group">
            <button id="single-enhance-btn" class="btn btn-primary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Analyze Link
            </button>
            <button id="single-clear-btn" class="btn">Clear All</button>
          </div>
        </div>

        <!-- Preview Section -->
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
              <circle cx="12" cy="12" r="3"/>
            </svg>
            Preview
          </h2>

          <div class="preview-area" id="single-preview-area">
            <div class="preview-placeholder">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
                <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
              </svg>
              <p class="font-medium">Link analysis will appear here</p>
              <p class="text-sm">Enter a URL and click "Analyze Link"</p>
            </div>
          </div>

          <div class="btn-group mt-4">
            <button id="single-publish-btn" class="btn btn-primary btn-full" disabled>
              Publish Link Post
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab 3: Link Roundup -->
    <div id="tab-link-roundup" class="tab-content">
      <div class="cms-layout">
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/>
              <rect x="8" y="2" width="8" height="4" rx="1" ry="1"/>
            </svg>
            Link Roundup
          </h2>

          <!-- Links -->
          <div class="form-group">
            <label for="roundup-links" class="form-label">Links (One per line)</label>
            <textarea id="roundup-links" class="form-textarea large" 
              placeholder="Paste multiple links here, one per line:

https://example.com/article1
https://example.com/article2
https://example.com/article3

AI will read each link and create thoughtful summaries with connections between them."></textarea>
          </div>

          <!-- Title -->
          <div class="form-group">
            <label for="roundup-title" class="form-label">Roundup Title</label>
            <div class="title-input-group">
              <input type="text" id="roundup-title" class="form-input" placeholder="AI will generate a thematic title...">
              <button type="button" id="roundup-generate-title-btn" class="btn-title-generate" title="Generate title with AI">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
            </div>
          </div>

          <!-- Theme/Context -->
          <div class="form-group">
            <label for="roundup-theme" class="form-label">Theme or Context (Optional)</label>
            <textarea id="roundup-theme" class="form-textarea" 
              placeholder="Provide a theme or context for the roundup...

Examples:
• Weekly interesting finds
• AI and automation trends  
• Design inspiration
• Productivity insights"></textarea>
          </div>

          <!-- Tags -->
          <div class="form-group">
            <label for="roundup-tags" class="form-label">Tags</label>
            <div class="tag-input-container">
              <div class="tag-list" id="roundup-tag-list"></div>
              <input type="text" id="roundup-tag-input" class="form-input" placeholder="Add tags (press Enter)">
            </div>
          </div>

          <!-- AI Actions -->
          <div class="btn-group">
            <button id="roundup-enhance-btn" class="btn btn-primary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Create Roundup
            </button>
            <button id="roundup-clear-btn" class="btn">Clear All</button>
          </div>
        </div>

        <!-- Preview Section -->
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
              <circle cx="12" cy="12" r="3"/>
            </svg>
            Preview
          </h2>

          <div class="preview-area" id="roundup-preview-area">
            <div class="preview-placeholder">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/>
                <rect x="8" y="2" width="8" height="4" rx="1" ry="1"/>
              </svg>
              <p class="font-medium">Link roundup will appear here</p>
              <p class="text-sm">Add links and click "Create Roundup"</p>
            </div>
          </div>

          <div class="btn-group mt-4">
            <button id="roundup-publish-btn" class="btn btn-primary btn-full" disabled>
              Publish Roundup
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab 4: File Upload -->
    <div id="tab-file-upload" class="tab-content">
      <div class="cms-layout">
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
              <polyline points="14,2 14,8 20,8"/>
              <line x1="16" y1="13" x2="8" y2="13"/>
              <line x1="16" y1="17" x2="8" y2="17"/>
              <polyline points="10,9 9,9 8,9"/>
            </svg>
            Upload & Analyze
          </h2>

          <!-- File Upload -->
          <div class="form-group">
            <label class="form-label">Upload File</label>
            <div class="file-upload" id="file-upload-area">
              <input type="file" id="file-input" accept=".pdf,.txt,.md,.doc,.docx">
              <div class="file-upload-content">
                <svg class="file-upload-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                  <polyline points="7,10 12,15 17,10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
                <p class="font-medium">Drop files here or click to upload</p>
                <p class="text-sm">Supports PDF, Text, Markdown, Word documents</p>
              </div>
            </div>
            <div id="file-info" class="hidden" style="margin-top: 1rem; padding: 1rem; background: var(--bg-secondary); border-radius: var(--radius-md);">
              <p class="font-medium" id="file-name"></p>
              <p class="text-sm" id="file-size"></p>
            </div>
          </div>

          <!-- Title -->
          <div class="form-group">
            <label for="file-title" class="form-label">Title</label>
            <div class="title-input-group">
              <input type="text" id="file-title" class="form-input" placeholder="AI will generate from file content...">
              <button type="button" id="file-generate-title-btn" class="btn-title-generate" title="Generate title with AI">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
            </div>
          </div>

          <!-- Analysis Instructions -->
          <div class="form-group">
            <label for="file-instructions" class="form-label">Analysis Instructions (Optional)</label>
            <textarea id="file-instructions" class="form-textarea" 
              placeholder="Tell AI what to focus on or how to analyze the file...

Examples:
• Summarize the key points
• Extract actionable insights
• Focus on the methodology
• Highlight interesting quotes
• Create a beginner-friendly explanation"></textarea>
          </div>

          <!-- Tags -->
          <div class="form-group">
            <label for="file-tags" class="form-label">Tags</label>
            <div class="tag-input-container">
              <div class="tag-list" id="file-tag-list"></div>
              <input type="text" id="file-tag-input" class="form-input" placeholder="Add tags (press Enter)">
            </div>
          </div>

          <!-- AI Actions -->
          <div class="btn-group">
            <button id="file-enhance-btn" class="btn btn-primary" disabled>
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
              Analyze File
            </button>
            <button id="file-clear-btn" class="btn">Clear All</button>
          </div>
        </div>

        <!-- Preview Section -->
        <div class="card">
          <h2>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
              <circle cx="12" cy="12" r="3"/>
            </svg>
            Preview
          </h2>

          <div class="preview-area" id="file-preview-area">
            <div class="preview-placeholder">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                <polyline points="14,2 14,8 20,8"/>
              </svg>
              <p class="font-medium">File analysis will appear here</p>
              <p class="text-sm">Upload a file and click "Analyze File"</p>
            </div>
          </div>

          <div class="btn-group mt-4">
            <button id="file-publish-btn" class="btn btn-primary btn-full" disabled>
              Publish Analysis
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Global state
    let currentTab = 'freeform';
    let selectedModel = 'claude';
    let currentTags = {
      freeform: [],
      single: [],
      roundup: [],
      file: []
    };
    let uploadedFile = null;

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      initializeEventListeners();
    });

    function initializeEventListeners() {
      // Tab switching
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          switchTab(this.dataset.tab);
        });
      });

      // Model selection
      document.querySelectorAll('.model-option').forEach(option => {
        option.addEventListener('click', function() {
          document.querySelectorAll('.model-option').forEach(opt => opt.classList.remove('active'));
          this.classList.add('active');
          selectedModel = this.dataset.model;
          console.log('Selected model:', selectedModel);
        });
      });

      // File upload
      setupFileUpload();

      // Tags for each tab
      ['freeform', 'single', 'roundup', 'file'].forEach(tab => {
        const tagInput = document.getElementById(`${tab}-tag-input`);
        if (tagInput) {
          tagInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              e.preventDefault();
              addTag(tab, this.value.trim());
              this.value = '';
            }
          });
        }

        // Clear buttons
        const clearBtn = document.getElementById(`${tab}-clear-btn`);
        if (clearBtn) {
          clearBtn.addEventListener('click', () => clearAll(tab));
        }

        // Test API button (only for freeform)
        if (tab === 'freeform') {
          const testBtn = document.getElementById(`${tab}-test-btn`);
          if (testBtn) {
            testBtn.addEventListener('click', testAPI);
          }
        }

        // Enhance buttons
        const enhanceBtn = document.getElementById(`${tab}-enhance-btn`);
        if (enhanceBtn) {
          enhanceBtn.addEventListener('click', () => enhanceContent(tab));
        }

        // Title generation buttons
        const titleBtn = document.getElementById(`${tab}-generate-title-btn`);
        if (titleBtn) {
          titleBtn.addEventListener('click', () => generateTitle(tab));
        }

        // Publish buttons
        const publishBtn = document.getElementById(`${tab}-publish-btn`);
        if (publishBtn) {
          publishBtn.addEventListener('click', () => publishContent(tab));
        }
      });

      // Follow-on prompting (only for freeform for now)
      const applyFollowOnBtn = document.getElementById('freeform-apply-followon-btn');
      const clearFollowOnBtn = document.getElementById('freeform-clear-followon-btn');
      
      if (applyFollowOnBtn) {
        applyFollowOnBtn.addEventListener('click', () => applyFollowOn('freeform'));
      }
      if (clearFollowOnBtn) {
        clearFollowOnBtn.addEventListener('click', () => clearFollowOn('freeform'));
      }
    }

    function switchTab(tabName) {
      // Update buttons
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

      // Update content
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
      });
      document.getElementById(`tab-${tabName}`).classList.add('active');

      currentTab = tabName;
    }

    function setupFileUpload() {
      const uploadArea = document.getElementById('file-upload-area');
      const fileInput = document.getElementById('file-input');
      const fileInfo = document.getElementById('file-info');
      const fileName = document.getElementById('file-name');
      const fileSize = document.getElementById('file-size');
      const enhanceBtn = document.getElementById('file-enhance-btn');

      uploadArea.addEventListener('click', () => fileInput.click());

      uploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadArea.classList.add('dragover');
      });

      uploadArea.addEventListener('dragleave', () => {
        uploadArea.classList.remove('dragover');
      });

      uploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFileUpload(files[0]);
        }
      });

      fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
          handleFileUpload(e.target.files[0]);
        }
      });

      function handleFileUpload(file) {
        uploadedFile = file;
        fileName.textContent = file.name;
        fileSize.textContent = `${(file.size / 1024 / 1024).toFixed(2)} MB`;
        fileInfo.classList.remove('hidden');
        enhanceBtn.disabled = false;
      }
    }

    function addTag(tab, tagText) {
      if (!tagText || currentTags[tab].includes(tagText)) return;
      
      currentTags[tab].push(tagText);
      renderTags(tab);
    }

    function removeTag(tab, tagText) {
      currentTags[tab] = currentTags[tab].filter(tag => tag !== tagText);
      renderTags(tab);
    }

    function renderTags(tab) {
      const tagList = document.getElementById(`${tab}-tag-list`);
      if (!tagList) return;
      
      tagList.innerHTML = currentTags[tab].map(tag => `
        <span class="tag">
          ${tag}
          <button type="button" class="tag-remove" onclick="removeTag('${tab}', '${tag}')">&times;</button>
        </span>
      `).join('');
    }

    function clearAll(tab) {
      // Clear form fields
      const titleInput = document.getElementById(`${tab}-title`);
      const contentInput = document.getElementById(`${tab}-content`);
      const urlInput = document.getElementById(`${tab}-url`);
      const linksInput = document.getElementById(`${tab}-links`);
      const themeInput = document.getElementById(`${tab}-theme`);
      const contextInput = document.getElementById(`${tab}-context`);
      const instructionsInput = document.getElementById(`${tab}-instructions`);

      if (titleInput) titleInput.value = '';
      if (contentInput) contentInput.value = '';
      if (urlInput) urlInput.value = '';
      if (linksInput) linksInput.value = '';
      if (themeInput) themeInput.value = '';
      if (contextInput) contextInput.value = '';
      if (instructionsInput) instructionsInput.value = '';

      // Clear tags
      currentTags[tab] = [];
      renderTags(tab);

      // Clear preview
      const previewArea = document.getElementById(`${tab}-preview-area`);
      if (previewArea) {
        previewArea.innerHTML = `
          <div class="preview-placeholder">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            <p class="font-medium">Preview will appear here</p>
            <p class="text-sm">Start creating content</p>
          </div>
        `;
      }

      // Reset publish button
      const publishBtn = document.getElementById(`${tab}-publish-btn`);
      if (publishBtn) publishBtn.disabled = true;

      // Hide follow-on section
      const followOnSection = document.getElementById(`${tab}-follow-on-section`);
      if (followOnSection) followOnSection.classList.add('hidden');

      // File upload specific
      if (tab === 'file') {
        uploadedFile = null;
        document.getElementById('file-info').classList.add('hidden');
        document.getElementById('file-enhance-btn').disabled = true;
        document.getElementById('file-input').value = '';
      }

      showStatus('All fields cleared', 'success');
    }

    async function testAPI() {
      setLoading('freeform-test-btn', true);
      
      try {
        const response = await fetch('/test-simple', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });

        const result = await response.json();

        if (result.success) {
          showStatus(`API Test Success! Status: ${response.status}, Message: ${result.message}`, 'success');
        } else {
          showStatus(`API Test Failed: ${result.error || 'Unknown error'}`, 'error');
        }
      } catch (error) {
        console.error('API Test error:', error);
        showStatus(`API Test Failed: ${error.message}`, 'error');
      } finally {
        setLoading('freeform-test-btn', false);
      }
    }

    async function generateTitle(tab) {
      const generateBtn = document.getElementById(`${tab}-generate-title-btn`);
      const titleInput = document.getElementById(`${tab}-title`);
      
      if (!titleInput) return;
      
      // Get content based on tab type
      let content = '';
      if (tab === 'freeform') {
        content = document.getElementById('freeform-content')?.value || '';
      } else if (tab === 'single') {
        const url = document.getElementById('single-url')?.value || '';
        const context = document.getElementById('single-context')?.value || '';
        content = context || `Content from URL: ${url}`;
      } else if (tab === 'roundup') {
        const links = document.getElementById('roundup-links')?.value || '';
        const theme = document.getElementById('roundup-theme')?.value || '';
        content = `Links: ${links}\nTheme: ${theme}`;
      } else if (tab === 'file') {
        const instructions = document.getElementById('file-instructions')?.value || '';
        content = `File: ${uploadedFile?.name || 'No file'}\nInstructions: ${instructions}`;
      }
      
      if (!content.trim()) {
        showStatus('Please add some content first', 'error');
        return;
      }
      
      setLoading(`${tab}-generate-title-btn`, true);
      
      try {
        const response = await fetch('/enhance', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            content: content,
            type: getTabType(tab),
            titleOnly: true,
            model: selectedModel
          })
        });

        const result = await response.json();

        if (result.success && result.title) {
          titleInput.value = result.title;
          showStatus('Title generated successfully!', 'success');
        } else {
          throw new Error(result.error || 'Failed to generate title');
        }
      } catch (error) {
        console.error('Title generation error:', error);
        showStatus(`Failed to generate title: ${error.message}`, 'error');
      } finally {
        setLoading(`${tab}-generate-title-btn`, false);
      }
    }

    async function enhanceContent(tab) {
      const enhanceBtn = document.getElementById(`${tab}-enhance-btn`);
      const previewArea = document.getElementById(`${tab}-preview-area`);
      const publishBtn = document.getElementById(`${tab}-publish-btn`);
      const followOnSection = document.getElementById(`${tab}-follow-on-section`);
      
      // Get content based on tab type
      let content = '';
      let url = '';
      let title = '';
      
      if (tab === 'freeform') {
        content = document.getElementById('freeform-content')?.value || '';
        title = document.getElementById('freeform-title')?.value || '';
      } else if (tab === 'single') {
        url = document.getElementById('single-url')?.value || '';
        content = document.getElementById('single-context')?.value || '';
        title = document.getElementById('single-title')?.value || '';
        
        if (!url.trim()) {
          showStatus('Please enter a URL to analyze', 'error');
          return;
        }
      } else if (tab === 'roundup') {
        const links = document.getElementById('roundup-links')?.value || '';
        const theme = document.getElementById('roundup-theme')?.value || '';
        title = document.getElementById('roundup-title')?.value || '';
        
        if (!links.trim()) {
          showStatus('Please enter links to create a roundup', 'error');
          return;
        }
        
        // Combine links and theme for content
        content = `Create a thoughtful roundup of these links:\n\n${links}\n\nTheme/Context: ${theme}`;
      } else if (tab === 'file') {
        const instructions = document.getElementById('file-instructions')?.value || '';
        title = document.getElementById('file-title')?.value || '';
        
        if (!uploadedFile) {
          showStatus('Please upload a file first', 'error');
          return;
        }
        
        content = `Analyze the uploaded file: ${uploadedFile.name}\n\nInstructions: ${instructions}`;
      }
      
      if (!content.trim() && !url.trim()) {
        showStatus('Please add some content or provide a URL', 'error');
        return;
      }
      
      setLoading(`${tab}-enhance-btn`, true);
      
      try {
        const requestData = {
          title: title,
          content: content,
          type: getTabType(tab),
          tags: currentTags[tab] || []
        };
        
        if (url) {
          requestData.url = url;
        }
        
        // Add model to request
        requestData.model = selectedModel;
        
        const response = await fetch('/enhance', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestData)
        });

        const result = await response.json();

        if (result.success) {
          // Update title if generated
          if (result.title && !title) {
            const titleInput = document.getElementById(`${tab}-title`);
            if (titleInput) titleInput.value = result.title;
          }
          
          // Update preview
          previewArea.innerHTML = result.preview || `<div class="preview-content">${result.content.replace(/\n/g, '<br>')}</div>`;
          
          // Add suggested tags
          if (result.tags && Array.isArray(result.tags)) {
            result.tags.forEach(tag => {
              if (!currentTags[tab].includes(tag)) {
                addTag(tab, tag);
              }
            });
          }
          
          // Enable publish button
          if (publishBtn) publishBtn.disabled = false;
          
          // Show follow-on section for freeform
          if (tab === 'freeform' && followOnSection) {
            followOnSection.classList.remove('hidden');
          }
          
          showStatus('Content enhanced successfully!', 'success');
        } else {
          throw new Error(result.error || 'Failed to enhance content');
        }
      } catch (error) {
        console.error('Enhancement error:', error);
        showStatus(`Failed to enhance content: ${error.message}`, 'error');
      } finally {
        setLoading(`${tab}-enhance-btn`, false);
      }
    }

    async function publishContent(tab) {
      const publishBtn = document.getElementById(`${tab}-publish-btn`);
      const titleInput = document.getElementById(`${tab}-title`);
      const previewArea = document.getElementById(`${tab}-preview-area`);
      
      const title = titleInput?.value || '';
      const content = previewArea?.innerHTML || '';
      
      if (!title.trim() || !content.trim()) {
        showStatus('Please generate content first', 'error');
        return;
      }
      
      setLoading(`${tab}-publish-btn`, true);
      
      try {
        const response = await fetch('/publish', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            title: title,
            content: content,
            type: getTabType(tab),
            tags: currentTags[tab] || []
          })
        });

        const result = await response.json();

        if (result.success) {
          showStatus('Content published successfully!', 'success');
          // Optionally clear the form after successful publish
          // clearAll(tab);
        } else {
          throw new Error(result.error || 'Failed to publish content');
        }
      } catch (error) {
        console.error('Publishing error:', error);
        showStatus(`Failed to publish content: ${error.message}`, 'error');
      } finally {
        setLoading(`${tab}-publish-btn`, false);
      }
    }

    async function applyFollowOn(tab) {
      const followOnPrompt = document.getElementById(`${tab}-follow-on-prompt`);
      const previewArea = document.getElementById(`${tab}-preview-area`);
      const applyBtn = document.getElementById(`${tab}-apply-followon-btn`);
      
      const followOnText = followOnPrompt?.value || '';
      const currentContent = previewArea?.textContent || '';
      
      if (!followOnText.trim()) {
        showStatus('Please enter follow-on instructions', 'error');
        return;
      }
      
      if (!currentContent.trim()) {
        showStatus('Please generate content first', 'error');
        return;
      }
      
      setLoading(`${tab}-apply-followon-btn`, true);
      
      try {
        const response = await fetch('/refine', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            content: currentContent,
            instructions: followOnText,
            type: getTabType(tab),
            followOn: true,
            model: selectedModel
          })
        });

        const result = await response.json();

        if (result.success && result.content) {
          // Update preview with refined content
          previewArea.innerHTML = result.preview || `<div class="preview-content">${result.content.replace(/\n/g, '<br>')}</div>`;
          
          // Clear follow-on prompt
          followOnPrompt.value = '';
          
          showStatus('Content refined successfully!', 'success');
        } else {
          throw new Error(result.error || 'Failed to refine content');
        }
      } catch (error) {
        console.error('Follow-on error:', error);
        showStatus(`Failed to refine content: ${error.message}`, 'error');
      } finally {
        setLoading(`${tab}-apply-followon-btn`, false);
      }
    }

    function getTabType(tab) {
      switch(tab) {
        case 'freeform': return 'musings';
        case 'single': return 'links';
        case 'roundup': return 'roundup';
        case 'file': return 'analysis';
        default: return 'musings';
      }
    }

    function clearFollowOn(tab) {
      const followOnPrompt = document.getElementById(`${tab}-follow-on-prompt`);
      if (followOnPrompt) {
        followOnPrompt.value = '';
      }
    }

    function showStatus(message, type = 'success') {
      const statusEl = document.getElementById('status-message');
      statusEl.textContent = message;
      statusEl.className = `status-message ${type}`;
      statusEl.style.display = 'block';
      
      setTimeout(() => {
        statusEl.style.display = 'none';
      }, 5000);
    }

    function setLoading(buttonId, isLoading) {
      const button = document.getElementById(buttonId);
      
      if (!button) return;
      
      if (isLoading) {
        button.disabled = true;
        button.dataset.originalHtml = button.innerHTML;
        button.innerHTML = '<span class="spinner"></span> Processing...';
      } else {
        button.disabled = false;
        button.innerHTML = button.dataset.originalHtml || button.innerHTML;
      }
    }

    // Make functions globally available
    window.removeTag = removeTag;
  </script>
</body>
</html>