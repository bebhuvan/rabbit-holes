---
export const prerender = true;

import { getCollection } from 'astro:content';
import Base from '../../layouts/Base.astro';
import PostCard from '../../components/PostCard.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return data.published !== false;
  });
  
  // Get all unique post types
  const types = [...new Set(posts.map(post => post.data.type))];
  
  return types.map(type => ({
    params: { type },
    props: { type, posts: posts.filter(post => post.data.type === type) }
  }));
}

const { type, posts } = Astro.props;

// Category metadata
const categoryMeta = {
  'taught-by-machine': { 
    emoji: 'ü§ñ', 
    label: 'Taught by the machine', 
    description: 'AI-assisted learning essays and explorations. These posts dive into topics with the help of AI, creating comprehensive educational content.',
    color: 'var(--color-type-taught-by-machine)'
  },
  'quick-thoughts': { 
    emoji: 'üí≠', 
    label: 'Quick thoughts', 
    description: 'Brief observations and spontaneous ideas. Short-form content capturing fleeting insights and immediate reactions.',
    color: 'var(--color-type-quick-thoughts)'
  },
  'link-dumps': { 
    emoji: 'üîç', 
    label: 'Link dumps', 
    description: 'Collections of interesting links and resources. Curated content from around the web with commentary and context.',
    color: 'var(--color-type-link-dumps)'
  },
  'deep-dives': { 
    emoji: 'üìö', 
    label: 'Deep dives', 
    description: 'Long-form analysis and thorough research. Comprehensive explorations of complex topics with detailed investigation.',
    color: 'var(--color-type-deep-dives)'
  },
  'thats-interesting': { 
    emoji: 'üåü', 
    label: "That's interesting", 
    description: 'Discoveries and "aha!" moments. Content that captures surprising findings and fascinating connections.',
    color: 'var(--color-type-thats-interesting)'
  },
  'practical': { 
    emoji: 'üéØ', 
    label: 'Practical', 
    description: 'How-tos and actionable content. Hands-on guides and step-by-step instructions for getting things done.',
    color: 'var(--color-type-practical)'
  },
  'reflections': { 
    emoji: 'üß†', 
    label: 'Reflections', 
    description: 'Personal insights and experiences. Thoughtful contemplations on life, work, and learning.',
    color: 'var(--color-type-reflections)'
  },
  'data-stories': { 
    emoji: 'üìà', 
    label: 'Data stories', 
    description: 'Analysis with charts and data visualization. Posts that tell stories through numbers and visual representations.',
    color: 'var(--color-type-data-stories)'
  },
  'news-commentary': { 
    emoji: 'üóûÔ∏è', 
    label: 'News & commentary', 
    description: 'Current events with perspective. Analysis and opinions on news, trends, and developments.',
    color: 'var(--color-type-news-commentary)'
  },
  'videos': { 
    emoji: 'üìπ', 
    label: 'Videos', 
    description: 'Video content and discussions. Posts featuring or discussing video content.',
    color: 'var(--color-type-videos)'
  },
  'music': { 
    emoji: 'üéµ', 
    label: 'Music', 
    description: 'Music discoveries and thoughts. Posts about musical finds, reviews, and audio experiences.',
    color: 'var(--color-type-music)'
  },
  'photos': { 
    emoji: 'üì∏', 
    label: 'Photos', 
    description: 'Visual content and photography. Posts centered around images and visual storytelling.',
    color: 'var(--color-type-photos)'
  }
};

const meta = categoryMeta[type] || { 
  emoji: 'üìù', 
  label: type, 
  description: `Posts categorized as ${type}`,
  color: 'var(--color-accent)'
};

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Get related categories (types that share tags with posts in this category)
const allPosts = await getCollection('posts', ({ data }) => data.published !== false);
const currentTags = new Set(posts.flatMap(post => post.data.tags || []));
const relatedTypes = [...new Set(
  allPosts
    .filter(post => post.data.type !== type && post.data.tags?.some(tag => currentTags.has(tag)))
    .map(post => post.data.type)
)].slice(0, 3);
---

<Base 
  title={`${meta.label} - Categories`} 
  description={`${meta.description} Browse all ${posts.length} posts in the ${meta.label} category.`}
>
  <div class="container">
    <div class="category-page">
      
      <!-- Header -->
      <div class="category-header">
        <div class="category-title-section">
          <span class="category-emoji" style={`background: ${meta.color}20; color: ${meta.color}`}>
            {meta.emoji}
          </span>
          <div class="category-title-info">
            <h1>{meta.label}</h1>
            <p class="category-count">{posts.length} post{posts.length !== 1 ? 's' : ''}</p>
          </div>
        </div>
        <p class="category-description">{meta.description}</p>
      </div>

      <!-- Posts -->
      <div class="category-posts">
        {sortedPosts.length > 0 ? (
          <div class="posts-grid">
            {sortedPosts.map(post => (
              <PostCard post={post} />
            ))}
          </div>
        ) : (
          <div class="empty-state">
            <p>No posts found in this category yet.</p>
          </div>
        )}
      </div>

      <!-- Related Categories -->
      {relatedTypes.length > 0 && (
        <div class="related-categories">
          <h3>Related Categories</h3>
          <div class="related-types">
            {relatedTypes.map(relatedType => {
              const relatedMeta = categoryMeta[relatedType];
              const relatedCount = allPosts.filter(p => p.data.type === relatedType).length;
              return (
                <a href={`/types/${relatedType}`} class="related-type">
                  <span class="related-emoji">{relatedMeta?.emoji || 'üìù'}</span>
                  <span class="related-label">{relatedMeta?.label || relatedType}</span>
                  <span class="related-count">({relatedCount})</span>
                </a>
              );
            })}
          </div>
        </div>
      )}

      <!-- Navigation -->
      <div class="category-navigation">
        <a href="/types" class="nav-link">‚Üê All Categories</a>
        <a href="/archive" class="nav-link">View Archive ‚Üí</a>
      </div>

    </div>
  </div>

  <style>
    .category-page {
      padding: var(--space-4xl) 0;
    }

    .category-header {
      margin-bottom: var(--space-3xl);
    }

    .category-title-section {
      display: flex;
      align-items: center;
      gap: var(--space-lg);
      margin-bottom: var(--space-lg);
    }

    .category-emoji {
      font-size: var(--text-4xl);
      width: 80px;
      height: 80px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: var(--radius-lg);
      line-height: 1;
    }

    .category-title-info h1 {
      font-size: var(--text-4xl);
      font-weight: 700;
      margin: 0 0 var(--space-xs) 0;
      color: var(--color-text-primary);
    }

    .category-count {
      color: var(--color-text-secondary);
      font-size: var(--text-lg);
      font-weight: 500;
      margin: 0;
    }

    .category-description {
      font-size: var(--text-lg);
      color: var(--color-text-secondary);
      line-height: var(--leading-relaxed);
      margin: 0;
      max-width: 700px;
    }

    .category-posts {
      margin-bottom: var(--space-3xl);
    }

    .posts-grid {
      display: grid;
      gap: var(--space-xl);
    }

    .empty-state {
      text-align: center;
      padding: var(--space-3xl);
      color: var(--color-text-secondary);
    }

    .related-categories {
      margin-bottom: var(--space-2xl);
      padding: var(--space-xl);
      background: var(--color-surface);
      border-radius: var(--radius-lg);
      border: 1px solid var(--color-border);
    }

    .related-categories h3 {
      margin: 0 0 var(--space-lg) 0;
      font-size: var(--text-xl);
      font-weight: 600;
      color: var(--color-text-primary);
    }

    .related-types {
      display: flex;
      gap: var(--space-md);
      flex-wrap: wrap;
    }

    .related-type {
      display: flex;
      align-items: center;
      gap: var(--space-sm);
      padding: var(--space-sm) var(--space-md);
      background: var(--color-bg-primary);
      border: 1px solid var(--color-border);
      border-radius: var(--radius-md);
      text-decoration: none;
      color: var(--color-text-secondary);
      transition: all 0.2s ease;
      font-size: var(--text-sm);
    }

    .related-type:hover {
      background: var(--color-accent);
      color: white;
      transform: translateY(-1px);
    }

    .related-emoji {
      font-size: var(--text-base);
    }

    .related-label {
      font-weight: 500;
    }

    .related-count {
      opacity: 0.7;
      font-size: var(--text-xs);
    }

    .category-navigation {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: var(--space-2xl);
      border-top: 1px solid var(--color-border);
    }

    .nav-link {
      color: var(--color-text-secondary);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.2s ease;
    }

    .nav-link:hover {
      color: var(--color-text-primary);
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .category-page {
        padding: var(--space-2xl) 0;
      }

      .category-title-section {
        flex-direction: column;
        text-align: center;
        gap: var(--space-md);
      }

      .category-emoji {
        width: 60px;
        height: 60px;
        font-size: var(--text-3xl);
      }

      .category-title-info h1 {
        font-size: var(--text-3xl);
      }

      .category-navigation {
        flex-direction: column;
        gap: var(--space-md);
        text-align: center;
      }

      .related-types {
        gap: var(--space-sm);
      }

      .related-type {
        font-size: var(--text-xs);
        padding: var(--space-xs) var(--space-sm);
      }
    }
  </style>
</Base>