---
export interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description = "Welcome to Rabbit Holes - a curiosity-driven journey through ideas, discoveries, and fascinating tangents. Find your next intellectual adventure here.", image } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    
    <!-- External CSS -->
    <link rel="stylesheet" href="/src/styles/globals.css" />
    <link rel="stylesheet" href="/src/styles/components.css" />
    <link rel="stylesheet" href="/src/styles/utilities.css" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    {image && <meta property="og:image" content={image} />}
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    {image && <meta property="twitter:image" content={image} />}
    
    <!-- RSS Feed -->
    <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/rss.xml" />
    
    <!-- Sitemap for search engines -->
    <link rel="sitemap" type="application/xml" title="Sitemap" href="/sitemap.xml" />
    
    <!-- SEO and Performance optimizations -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Bhuvan" />
    <meta name="theme-color" content="#fb923c" />
    <link rel="canonical" href={Astro.url} />
    
    <!-- PWA Meta Tags -->
    <link rel="manifest" href="/manifest.json" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Rabbit Holes" />
    <meta name="msapplication-TileColor" content="#fb923c" />
    
    <!-- PWA Icons -->
    <link rel="apple-touch-icon" sizes="152x152" href="/icons/icon-152x152.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icons/icon-192x192.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/icons/icon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/icons/icon-16x16.png" />

    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="dns-prefetch" href="https://www.youtube.com" />
    <link rel="dns-prefetch" href="https://open.spotify.com" />
    
    <!-- Structured Data for SEO -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Blog",
        "name": "Rabbit Holes",
        "description": "A curiosity-driven journey through ideas, discoveries, and fascinating tangents",
        "url": "https://bhuvan.dev",
        "author": {
          "@type": "Person",
          "name": "Bhuvan",
          "url": "https://bhuvan.dev/about"
        },
        "publisher": {
          "@type": "Organization",
          "name": "Rabbit Holes",
          "logo": {
            "@type": "ImageObject",
            "url": "https://bhuvan.dev/favicon.svg"
          }
        }
      }
    </script>
  </head>
  <body>
    <!-- Skip link for keyboard navigation -->
    <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 btn btn-primary z-50">Skip to main content</a>
    
    <nav class="nav" aria-label="Main navigation">
      <div class="container nav-container">
        <a href="/" class="nav-logo">üê∞ Rabbit Holes</a>
        
        <!-- Mobile menu button -->
        <button class="mobile-menu-toggle md-hidden" id="mobile-menu-toggle" aria-label="Toggle navigation menu" aria-expanded="false">
          <span class="hamburger"></span>
          <span class="hamburger"></span>
          <span class="hamburger"></span>
        </button>
        
        <div class="nav-links" id="nav-links">
          <a href="/about" class="nav-link">About</a>
          <a href="/archive" class="nav-link">Archive</a>
          <a href="/tags" class="nav-link">Tags</a>
          <a href="/blogroll" class="nav-link">Blogroll</a>
          <a href="/search" class="nav-link" title="Search (Cmd+K)">Search</a>
          <a href="/rss.xml" class="nav-link">RSS</a>
          <button class="theme-toggle" id="theme-toggle" aria-label="Toggle dark mode" aria-pressed="false">
            <svg class="theme-icon theme-icon--light" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <circle cx="12" cy="12" r="5"></circle>
              <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"></path>
            </svg>
            <svg class="theme-icon theme-icon--dark" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
            </svg>
          </button>
        </div>
      </div>
    </nav>

    <main id="main-content">
      <slot />
    </main>
    
    <!-- Share Feedback -->
    <div class="share-feedback" id="share-feedback"></div>

    <style>
      /* Mobile Menu States */
      .mobile-menu-toggle {
        display: none;
        background: none;
        border: none;
        flex-direction: column;
        cursor: pointer;
        padding: var(--space-xs);
        gap: 4px;
        border-radius: var(--radius-sm);
        transition: background 0.2s ease;
      }

      .mobile-menu-toggle:hover {
        background: var(--color-surface);
      }

      .hamburger {
        width: 20px;
        height: 2px;
        background: var(--color-text-primary);
        border-radius: 1px;
        transition: all 0.3s ease;
      }

      .mobile-menu-toggle--active .hamburger:nth-child(1) {
        transform: rotate(45deg) translate(5px, 5px);
      }

      .mobile-menu-toggle--active .hamburger:nth-child(2) {
        opacity: 0;
      }

      .mobile-menu-toggle--active .hamburger:nth-child(3) {
        transform: rotate(-45deg) translate(7px, -6px);
      }
      
      /* Mobile Navigation */
      @media (max-width: 768px) {
        .mobile-menu-toggle {
          display: flex;
        }

        .nav-links {
          position: absolute;
          top: 100%;
          left: 0;
          right: 0;
          background: var(--color-bg);
          border-bottom: 1px solid var(--color-border);
          flex-direction: column;
          gap: 0;
          padding: var(--space-lg) var(--space-lg);
          display: none;
        }

        .nav-links--open {
          display: flex;
        }

        .nav-link {
          padding: var(--space-md) 0;
          border-bottom: 1px solid var(--color-border);
          width: 100%;
          min-height: 44px;
          display: flex;
          align-items: center;
        }

        .nav-link:last-child {
          border-bottom: none;
        }
        
        .theme-toggle {
          margin-top: var(--space-md);
          align-self: center;
        }
      }
      
      /* Share Feedback */
      .share-feedback {
        position: fixed;
        bottom: var(--space-lg);
        right: var(--space-lg);
        background: var(--color-accent);
        color: white;
        padding: var(--space-sm) var(--space-md);
        border-radius: var(--radius-md);
        font-size: var(--text-sm);
        font-weight: 500;
        transform: translateY(100px);
        opacity: 0;
        transition: all 0.3s ease;
        z-index: 1000;
        pointer-events: none;
      }
      
      .share-feedback--visible {
        transform: translateY(0);
        opacity: 1;
      }
      
      .share-feedback--error {
        background: var(--color-error);
      }
      
      .share-feedback--success {
        background: var(--color-accent);
      }
      
      /* Theme toggle styles moved to components.css for global scope */
    </style>

    <!-- Theme initialization - must run immediately before render -->
    <script>
      // Initialize theme immediately to prevent flash
      (function() {
        const savedTheme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
        
        document.documentElement.setAttribute('data-theme', initialTheme);
        localStorage.setItem('theme', initialTheme);
        
        console.log('Theme initialized:', initialTheme);
      })();
      
      // Theme toggle function - available immediately
      function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        console.log('Toggling theme from', currentTheme, 'to', newTheme);
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        
        // Update button aria-pressed state
        const toggle = document.getElementById('theme-toggle');
        if (toggle) {
          toggle.setAttribute('aria-pressed', (newTheme === 'dark').toString());
        }
        
        console.log('Theme toggled to:', newTheme);
      }
      
      // Make function globally available
      window.toggleTheme = toggleTheme;
      
      // Initialize when DOM is ready
      document.addEventListener('DOMContentLoaded', function() {
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
          themeToggle.addEventListener('click', toggleTheme);
          
          // Set initial aria-pressed state
          const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
          themeToggle.setAttribute('aria-pressed', (currentTheme === 'dark').toString());
          
          console.log('Theme toggle initialized. Current theme:', currentTheme);
        }
      });
    </script>
    
    <script type="module">
      import { app } from '/src/scripts/utils.js';
      app.init();
    </script>

    <!-- PWA Service Worker Registration -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
              console.log('SW registered: ', registration);
              
              // Check for updates
              registration.addEventListener('updatefound', () => {
                const newWorker = registration.installing;
                if (newWorker) {
                  newWorker.addEventListener('statechange', () => {
                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                      // New content available, show update notification
                      showUpdateNotification();
                    }
                  });
                }
              });
            })
            .catch((registrationError) => {
              console.log('SW registration failed: ', registrationError);
            });
        });

        // Listen for messages from service worker
        navigator.serviceWorker.addEventListener('message', (event) => {
          if (event.data && event.data.type === 'NEW_VERSION_AVAILABLE') {
            showUpdateNotification();
          }
        });
      }

      function showUpdateNotification() {
        // Create a subtle update notification
        const notification = document.createElement('div');
        notification.innerHTML = `
          <div style="
            position: fixed;
            bottom: 20px;
            left: 20px;
            right: 20px;
            background: var(--color-accent);
            color: white;
            padding: 16px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(251, 146, 60, 0.3);
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 400px;
            margin: 0 auto;
          ">
            <span>üöÄ New content available!</span>
            <button onclick="window.location.reload()" style="
              background: rgba(255,255,255,0.2);
              border: none;
              color: white;
              padding: 8px 16px;
              border-radius: 4px;
              cursor: pointer;
              font-weight: 500;
            ">Update</button>
          </div>
        `;
        
        document.body.appendChild(notification);
        
        // Auto-hide after 10 seconds
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 10000);
      }

      // Install prompt handling
      let deferredPrompt;
      window.addEventListener('beforeinstallprompt', (e) => {
        // Prevent the mini-infobar from appearing on mobile
        e.preventDefault();
        deferredPrompt = e;
        
        // Show custom install button if desired
        showInstallButton();
      });

      function showInstallButton() {
        // You can add a custom "Add to Home Screen" button here
        console.log('PWA install available');
      }

      // Handle successful installation
      window.addEventListener('appinstalled', () => {
        console.log('PWA was installed successfully');
        deferredPrompt = null;
      });
    </script>
  </body>
</html>