// Cloudflare Function for Claude API integration
// This function enhances blog post content with AI-generated "Dive Deeper" suggestions

export async function onRequest(context) {
  const { request, env } = context;
  
  // Handle CORS preflight requests
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Max-Age': '86400',
      }
    });
  }
  
  if (request.method !== 'POST') {
    return new Response('Method not allowed', { 
      status: 405,
      headers: {
        'Access-Control-Allow-Origin': '*'
      }
    });
  }
  
  try {
    const { title, content, tags, type, url, titleOnly } = await request.json();
    
    if (!content && !titleOnly) {
      return new Response(JSON.stringify({
        success: false,
        error: 'Missing required fields'
      }), { 
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }
    
    // Clean ALL inputs immediately to remove problematic characters
    const cleanContent = content ? content.replace(/[\u0000-\u001F\u007F-\u009F]/g, '').trim() : '';
    const cleanTitle = title ? title.replace(/[\u0000-\u001F\u007F-\u009F]/g, '').trim() : null;
    const cleanUrl = url ? url.replace(/[\u0000-\u001F\u007F-\u009F]/g, '').trim() : null;
    
    // Handle title generation only
    if (titleOnly) {
      const titlePrompt = `Generate an engaging, curiosity-driven title for this content:

${cleanContent || `Content about: ${cleanUrl}`}

Type: ${type}

Return only the title, nothing else. Make it intriguing and click-worthy while being accurate.`;
      
      const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': env.CLAUDE_API_KEY,
          'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
          model: 'claude-3-haiku-20240307',
          max_tokens: 100,
          messages: [{
            role: 'user',
            content: titlePrompt
          }]
        })
      });
      
      if (!claudeResponse.ok) {
        throw new Error(`Claude API error: ${claudeResponse.status}`);
      }
      
      const claudeData = await claudeResponse.json();
      const generatedTitle = claudeData.content[0].text.trim().replace(/^["']|["']$/g, '');
      
      return new Response(JSON.stringify({
        success: true,
        title: generatedTitle
      }), {
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST',
          'Access-Control-Allow-Headers': 'Content-Type',
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
    }
    
    // Enhance content with URL fetching if it's a link post
    let enhancedContent = cleanContent;
    if (cleanUrl && (type === 'link' || type === 'video' || type === 'music')) {
      try {
        const urlContent = await fetchUrlContent(cleanUrl);
        enhancedContent = `${cleanContent}\n\n[URL Content Summary: ${urlContent.slice(0, 400)}...]`;
      } catch (error) {
        console.log('Could not fetch URL content:', error.message);
      }
    }
    
    // Create prompt based on content type
    let mainPrompt = '';
    
    if (type === 'roundup') {
      // Special handling for link roundups
      mainPrompt = `You're a curious curator sharing interesting finds. Create a link roundup with a casual, conversational tone - like sharing cool discoveries with a friend.

INPUT:
${enhancedContent}

TONE & STYLE:
- Simple, direct, informal language
- No buzzwords or over-the-top professional language
- Write like someone who genuinely finds things interesting
- Use "I found this..." or "This caught my eye..." 
- Be enthusiastic but not hyperbolic

STRUCTURE:
${!cleanTitle ? `Start with an engaging title as # heading` : ''}

Brief intro explaining the theme or what caught your attention about these links.

Then for each link:
**[Link Title or Description]**: Brief summary of what makes it interesting. Why did it catch your attention? What's the key insight? [Original Link](url)

End with a simple conclusion tying them together or a question for readers.

Add this disclaimer at the very end (separated by a single line break):

*This content was generated by Claude AI.*

Keep it conversational and genuine - like a curator sharing genuinely interesting discoveries.`;
    } else {
      // Standard prompt for other types
      mainPrompt = `You're a curious curator who loves discovering interesting patterns and connections. Write in a simple, direct, informal tone - like sharing a fascinating discovery with a friend.

INPUT:
Title: ${cleanTitle || 'Generate an engaging title'}
Type: ${type}
${cleanUrl ? `URL: ${cleanUrl}` : ''}
Content: ${enhancedContent}

STRUCTURE:
${!cleanTitle ? `Start with a compelling title as an H1 heading (# Title)` : ''}

TONE & STYLE:
- Simple, direct, informal and blog-like language
- No professional or over the top language  
- Write in the voice of a curator sharing interesting things
- Begin naturally: "I came across something interesting..." or "This caught my attention..."
- Share your genuine curiosity: "This got me thinking..." or "What's fascinating is..."
- Ask questions that spark curiosity
- Connect ideas naturally
${cleanUrl ? `- MANDATORY: Reference and hyperlink the original source early in the post: "I found this interesting [piece about X](${cleanUrl}) that got me thinking..." or "This [fascinating article](${cleanUrl}) caught my attention because..."` : ''}

${cleanUrl ? `MANDATORY: End with a "## Rabbit Holes" section with 4-5 connections:
Format: "**Topic**: 2-3 sentence description explaining the connection. [Explore this →](working-URL)"

Example: "**Jazz and Quantum Physics**: Both involve improvisation within structured frameworks. Jazz musicians work within chord progressions while creating spontaneous variations, much like quantum particles exist in probability states until observed. [Explore this →](https://en.wikipedia.org/wiki/Quantum_mechanics)"

Requirements:
- Mix domains: science, art, history, psychology, philosophy, technology
- Each needs 2-3 sentences explaining WHY it connects
- Use ONLY these verified, reliable sources:

**Wikipedia (primary choice):**
• https://en.wikipedia.org/wiki/Behavioral_economics
• https://en.wikipedia.org/wiki/Game_theory
• https://en.wikipedia.org/wiki/Protectionism
• https://en.wikipedia.org/wiki/Cognitive_bias
• https://en.wikipedia.org/wiki/Complex_system
• https://en.wikipedia.org/wiki/[exact-topic-name]

**Educational institutions:**
• https://www.khanacademy.org/economics-finance-domain/ap-macroeconomics
• https://www.coursera.org/learn/behavioral-economics
• https://www.edx.org/course/introduction-to-psychology

**Museums & Cultural:**
• https://www.smithsonianmag.com/
• https://www.metmuseum.org/
• https://www.moma.org/

**Trusted science sources:**
• https://www.scientificamerican.com/
• https://www.nature.com/
• https://www.nationalgeographic.com/

**Government/Academic:**
• https://www.nasa.gov/
• https://www.nih.gov/
• https://www.ted.com/talks

- CRITICAL: Only use domains listed above, no made-up or unverified links
- Make connections feel like genuine discoveries` : ''}

Add this disclaimer at the very end (separated by a single line break):

*This content was generated by Claude AI${cleanUrl ? ' to discover connections and generate the Rabbit Holes section. The original source was read and analyzed to create this exploration of related topics' : ''}.*

Write like you're genuinely excited about sharing something cool you discovered.`;
    }
    
    // Debug log
    console.log('Main prompt length:', mainPrompt.length);
    
    // Standard Claude API call
    const requestBody = JSON.stringify({
      model: 'claude-3-haiku-20240307',
      max_tokens: 1500,
      messages: [{
        role: 'user',
        content: mainPrompt
      }]
    });
    
    // Debug the request body
    console.log('Request body length:', requestBody.length);
    
    // Check if API key exists
    if (!env.CLAUDE_API_KEY) {
      throw new Error('CLAUDE_API_KEY is not configured. Please add it in Cloudflare Pages dashboard under Settings > Environment variables.');
    }
    
    // Claude API integration
    const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': env.CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: requestBody
    });
    
    if (!claudeResponse.ok) {
      const errorText = await claudeResponse.text();
      console.error('Claude API Error:', {
        status: claudeResponse.status,
        error: errorText
      });
      throw new Error(`Claude API error: ${claudeResponse.status} - ${errorText}`);
    }
    
    const claudeData = await claudeResponse.json();
    const aiResponse = claudeData.content[0].text;
    
    // Extract or generate title from AI response
    let generatedTitle = cleanTitle || 'Untitled';
    if (!cleanTitle) {
      // Try to extract title from AI response (look for first # heading)
      const titleMatch = aiResponse.match(/^# (.+)$/m);
      if (titleMatch) {
        generatedTitle = titleMatch[1];
      } else {
        // Generate a simple title from the first line or content
        const firstLine = aiResponse.split('\n')[0].replace(/[#*]/g, '').trim();
        generatedTitle = firstLine.length > 60 ? firstLine.substring(0, 60) + '...' : firstLine;
      }
    }
    
    // Generate simple frontmatter
    const frontmatter = `---
title: "${generatedTitle}"
date: ${new Date().toISOString().split('T')[0]}
type: "${type}"
tags: []
published: false
---`;
    
    // Generate HTML preview
    const preview = generatePreview(aiResponse, cleanTitle);
    
    // Extract enhanced title if AI generated one
    let finalTitle = generatedTitle;
    let finalContent = aiResponse;
    
    // If AI response starts with a title, extract it
    const titleMatch = aiResponse.match(/^# (.+)$/m);
    if (titleMatch && !cleanTitle) {
      finalTitle = titleMatch[1];
      // Remove the title from content since it will be in the title field
      finalContent = aiResponse.replace(/^# .+$/m, '').trim();
    }
    
    // Generate suggested tags from content
    const suggestedTags = ["discovery", "exploration"];
    if (type === 'links') suggestedTags.push('links');
    if (type === 'videos') suggestedTags.push('videos');
    if (type === 'music') suggestedTags.push('music');
    
    return new Response(JSON.stringify({
      success: true,
      title: finalTitle,
      content: finalContent,
      tags: suggestedTags,
      dive_deeper: ["Explore this topic further", "Find related concepts", "Discover connections"],
      frontmatter: frontmatter,
      preview: preview,
      enhanced: true
    }), {
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
    
  } catch (error) {
    console.error('AI enhancement error:', error);
    console.error('Error details:', {
      message: error.message,
      stack: error.stack,
      hasApiKey: !!env.CLAUDE_API_KEY
    });
    return new Response(JSON.stringify({
      success: false,
      error: 'Failed to enhance content',
      details: error.message,
      hasApiKey: !!env.CLAUDE_API_KEY
    }), {
      status: 500,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST',
        'Access-Control-Allow-Headers': 'Content-Type'
      }
    });
  }
}

async function buildEnhancePrompt(title, type, url, content, tags, env) {
  let enhancedContent = content;
  
  // TEMPORARILY DISABLE URL FETCHING TO ISOLATE JSON ISSUE
  // if (url && (type === 'link' || type === 'video' || type === 'music')) {
  //   try {
  //     const urlContent = await fetchUrlContent(url);
  //     enhancedContent = `${content}\n\n[URL Content Summary: ${urlContent.slice(0, 500)}...]`;
  //   } catch (error) {
  //     console.log('Could not fetch URL content:', error.message);
  //   }
  // }
  
  // Clean content aggressively for JSON safety
  const cleanContent = enhancedContent
    .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // Remove control characters
    .replace(/[\u2000-\u206F\u2E00-\u2E7F\u3000-\u303F]/g, '') // Remove Unicode spaces/punctuation
    .replace(/[\uFFF0-\uFFFF]/g, '') // Remove Unicode specials
    .replace(/\r\n/g, ' ') // Replace CRLF with space
    .replace(/\n/g, ' ') // Replace LF with space
    .replace(/\r/g, ' ') // Replace CR with space
    .replace(/\t/g, ' ') // Replace tabs with space
    .replace(/\s+/g, ' ') // Collapse multiple spaces
    .trim();
    
  const cleanTitle = (title || 'Untitled')
    .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
    .replace(/[\u2000-\u206F\u2E00-\u2E7F\u3000-\u303F]/g, '')
    .replace(/[\uFFF0-\uFFFF]/g, '')
    .replace(/[\r\n\t]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
    
  const cleanUrl = (url || '')
    .replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
    .trim();
  
  const basePrompt = `# SERENDIPITY ARCHITECT

You create "rabbit hole" content that sparks curiosity and reveals unexpected connections. Your goal: make readers think "I never realized these things were connected!"

## INPUT:
Title: ${cleanTitle}
Type: ${type}
${url ? `URL: ${cleanUrl}` : ''}
Content: ${cleanContent}

## WRITING STYLE:
- Natural, conversational tone (not overly casual)
- Hook with something surprising or counterintuitive
- Reveal hidden patterns between different fields
- End sections with intriguing questions
- Reference the original source naturally: "I stumbled across this fascinating [article about X](URL)..."

## CONTENT STRUCTURE:
1. **Opening Hook**: Start with the most surprising aspect
2. **Main Content**: Explore connections across disciplines
3. **Cross-domain Insights**: Show how this relates to other fields
${url ? `4. **Rabbit Holes Section**: MANDATORY - see requirements below` : ''}

${url ? `
## RABBIT HOLES SECTION (MANDATORY):
After your main content, add exactly this structure:

## Rabbit Holes

**[Domain 1 Connection]**: Why this matters [Link](URL)
**[Domain 2 Connection]**: Why this matters [Link](URL)
**[Domain 3 Connection]**: Why this matters [Link](URL)
**[Domain 4 Connection]**: Why this matters [Link](URL)
**[Domain 5 Connection]**: Why this matters [Link](URL)
**[Wildcard Connection]**: Something completely unexpected [Link](URL)

REQUIREMENTS:
- Mix domains: science, art, history, psychology, philosophy, technology
- Use quality sources: Wikipedia, research papers, YouTube (educational), museums
- Make each connection feel like a mini-revelation
- Include actual working hyperlinks
` : ''}

## OUTPUT FORMAT:
Return this exact JSON structure:

{
  "content": "Your enhanced markdown content${url ? ' with ## Rabbit Holes section' : ''}",
  "frontmatter": "---\ntitle: \"Your Title\"\ndate: 2025-01-18\ntype: \"${type}\"\ntags: [\"tag1\", \"tag2\"]\npublished: true\n---",
  "dive_deeper": ["Intriguing question 1", "Mystery to explore 2", "Connection to investigate 3"],
  "suggested_tags": ["cross-domain tag 1", "interdisciplinary tag 2"]
}

${url ? `⚠️ CRITICAL: The ## Rabbit Holes section with 6 hyperlinked connections is MANDATORY for URL posts. Do not omit this.` : ''}`;

  return basePrompt;
}

async function fetchUrlContent(url) {
  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; RabbitHolesBlog/1.0)'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const html = await response.text();
    
    // Extract text content from HTML (basic extraction)
    let textContent = html
      .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
      .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
      .replace(/<[^>]*>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    
    // Remove control characters only
    textContent = textContent.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
    
    return textContent.slice(0, 1000); // Limit to 1000 chars
  } catch (error) {
    throw new Error(`Failed to fetch URL: ${error.message}`);
  }
}

function generatePreview(markdown, title) {
  // Simple markdown to HTML conversion for preview
  let html = markdown
    .replace(/^# (.*$)/gm, '<h1>$1</h1>')
    .replace(/^## (.*$)/gm, '<h2>$1</h2>')
    .replace(/^### (.*$)/gm, '<h3>$1</h3>')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/`(.*?)`/g, '<code>$1</code>')
    .replace(/\n\n/g, '</p><p>')
    .replace(/\n/g, '<br>');
  
  // Wrap in paragraphs
  html = '<p>' + html + '</p>';
  
  // Clean up empty paragraphs
  html = html.replace(/<p><\/p>/g, '');
  
  return html;
}